REC-SPEC Permutations
# common definitions to be included in the REC/permutations*.rec benchmarks

SORTS
  Nat NatList NatListList
CONS
  d0 : -> Nat
  s : Nat -> Nat
  nil : -> NatList
  l : Nat -> NatList
  ll : NatList NatList -> NatList # {assoc id(nil)}
  nilP : -> NatListList
  p : NatList -> NatListList
  pp : NatListList NatListList -> NatListList # {assoc id(nilP)}
OPNS
  perm : Nat -> NatListList
  insert1 : Nat NatListList -> NatListList
  insert0 : Nat NatList -> NatListList
  map_cons : Nat NatListList -> NatListList
  ppreduce : NatListList NatListList -> NatListList # added by H. Garavel
  ppflat : NatListList NatListList -> NatListList   # added by H. Garavel
VARS
  P1 P2 : NatList
  Ps Ps1 Ps2 accumulator : NatListList
  N M : Nat
RULES
  perm(d0) -> ppreduce(p(nil), nilP)
  perm(s(d0)) -> ppreduce(p(ll(l(s(d0)), nil)), nilP)
  perm(s(N)) -> insert1(s(N), perm(N))
  insert1(N, pp(p(P1), Ps)) -> ppreduce(insert0(N, P1), insert1(N, Ps))
  insert1(N, p(P1)) -> insert0 (N,P1)     # added by H. Garavel
  insert1(N, nilP) -> nilP
  insert0(N, ll(l(M), P2)) -> ppreduce(p(ll(l(N), ll(l(M), P2))), map_cons(M, insert0(N, P2)))
  insert0(N, nil) -> ppreduce(p(ll(l(N), nil)), nilP)
  map_cons(M, pp(p(P1), Ps)) -> ppreduce(p(ll(l(M), P1)), map_cons(M, Ps))
  map_cons(M, p(P1)) -> p(ll(l(M), P1))     # added by H. Garavel
  map_cons(M, nilP) -> nilP
  ppreduce (nilP, Ps2) -> Ps2   # to express id(nilP)
  ppreduce (Ps1, nilP) -> Ps1   # to express id(nilP)
  ppreduce (Ps1, Ps2) -> ppflat (Ps1, ppflat (Ps2, nilP))
  # assert that ppflat (...) and accumulator are well-formed lists
  ppflat (nilP, accumulator) -> accumulator
  ppflat (p (P1), accumulator) -> pp (p (P1), accumulator)
  ppflat (pp (Ps1, Ps2), accumulator) -> ppflat (Ps1, ppflat (Ps2, accumulator))

EVAL
END-SPEC
