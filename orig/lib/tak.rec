REC-SPEC Tak

# common definitions to be included in the REC/tak*.rec benchmarks

SORTS
  Bool Nat Int
CONS
  true : -> Bool
  false : -> Bool
  d0 : -> Nat             # zero
  s : Nat -> Nat
  Pos : Nat -> Int
  Neg : Nat -> Int
OPNS
  gte : Nat Nat -> Bool
  gte_Int : Int Int -> Bool
  pred : Int -> Int
  succ : Int -> Int
  tak : Int Int Int -> Int      # Takeuchi
VARS
  X Y Z : Nat
  I J K : Int
RULES
  gte(d0, d0) -> true
  gte(s(X), d0) -> true
  gte(d0, s(X)) -> false
  gte(s(X), s(Y)) -> gte(X, Y)
  gte_Int(Pos(X), Pos(Y)) -> gte(X,Y)
  gte_Int(Neg(X), Neg(Y)) -> gte(Y,X)
  gte_Int(Pos(X), Neg(Y)) -> true
  gte_Int(Neg(X), Pos(Y)) -> false
  pred(Pos(d0)) -> Neg(d0)
  pred(Pos(s(X))) -> Pos(X)
  pred(Neg(X)) -> Neg(s(X))
  succ(Neg(d0)) -> Pos(d0)
  succ(Neg(s(X))) -> Neg(X)
  succ(Pos(X)) -> Pos(s(X))

  # The two following rules define the Takeuchi function.
  # Notice that these are two conditional rules, the conditions of which
  # cannot be removed nor replaced by pattern-matching over free constructors,
  # because it is the algorithmic essence of the Tak function:

  tak(I, J, K) -> K if gte_Int(J, I) = true
  tak(I, J, K) -> tak(tak(pred(I), J, K), tak(pred(J), K, I), tak(pred(K), I, J)) if gte_Int(J, I) = false
EVAL
END-SPEC

