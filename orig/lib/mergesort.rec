REC-SPEC MergeSort

# common definitions to be included in the REC/mergesort*.rec benchmarks

SORTS
  Bool Nat NatList ListPair
CONS
  true : -> Bool
  false : -> Bool
  d0 : -> Nat
  s : Nat -> Nat
  nil : -> NatList
  cons : Nat NatList -> NatList
  pair : NatList NatList -> ListPair
OPNS
  d10 : -> Nat
  lte : Nat Nat -> Bool
  plus : Nat Nat -> Nat
  times : Nat Nat -> Nat
  rev : Nat -> NatList
  split : NatList -> ListPair
  merge : NatList NatList -> NatList
  mergesort : NatList -> NatList
  p1 : ListPair -> NatList
  p2 : ListPair -> NatList
VARS
  X Y N M : Nat
  L1 L2 L : NatList
RULES
  d10 -> s(s(s(s(s(s(s(s(s(s(d0))))))))))
  lte(d0, s(N)) -> true
  lte(s(N), d0) -> false
  lte(d0, d0) -> true
  lte(s(N), s(M)) -> lte(N, M)
  plus(d0, N) -> N
  plus(s(N), M) -> s(plus(N, M))
  times(d0, N) -> d0
  times(s(N), M) -> plus(M, times(N, M))
  rev(s(N)) -> cons(s(N), rev(N))
  rev(d0) -> cons(d0, nil)
  merge(nil, L) -> L
  merge(L, nil) -> L
  merge(cons(X, L1), cons(Y, L2)) -> cons(X, merge(L1, cons(Y, L2)))     if lte(X, Y) = true
  merge(cons(X, L1), cons(Y, L2)) -> cons(Y, merge(cons(X, L1), L2))     if lte(X, Y) = false
  split(cons(X, cons(Y, L))) -> pair(cons(X, p1(split(L))), cons(Y, p2(split(L))))  # pair(cons(X, L1), cons(Y, L2))     if split(L) --> pair(L1, L2)
  split(nil) -> pair(nil, nil)
  split(cons(X, nil)) -> pair(cons(X, nil), nil)
  mergesort(nil) -> nil
  mergesort(cons(X, nil)) -> cons(X, nil)
  mergesort(cons(X, cons(Y, L))) -> merge(mergesort(cons(X, p1(split(L)))), mergesort(cons(Y, p2(split(L)))))  # merge(mergesort(cons(X, L1)), mergesort(cons(Y, L2)))     if split(L) --> pair(L1, L2)
  p1(pair(L1, L2)) -> L1
  p2(pair(L1, L2)) -> L2
EVAL
END-SPEC
