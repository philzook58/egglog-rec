REC-SPEC Block # imports Bool Bit Octet OctetSum Half HalfSum

# Block (32-bit machine words) with 16x16 binary multiplier - H. Garavel 2016, 2019
# (the name Block comes from the Message Authentication Algorithm terminology)

SORTS
   Block

CONS
   buildBlock : Octet Octet Octet Octet -> Block
   # the first argument of buildBlock contain the most significant bits

OPNS
   eqBlock : Block Block -> Bool

   andBlock : Block Block -> Block
   orBlock  : Block Block -> Block
   xorBlock : Block Block -> Block

   HalfU : Block -> Half
   HalfL : Block -> Half

   mulHalf : Half Half -> Block
   # the 1st part of the resulting Block is the highMul
   # the 2nd part of the resulting Block is the lowMul

   mulHalfA : Half Half Half Half -> Block
   mulHalf4 : Octet Octet Octet Octet Octet Octet Octet Octet -> Block
   mulHalf3 : Octet Octet Octet Octet Half Octet -> Block
   mulHalf2 : Octet Half Octet Octet -> Block
   mulHalf1 : Half Octet Octet Octet -> Block

VARS
   O1 O2 O3 O4 O'1 O'2 O'3 O'4 O"1 O"2 O"3 O"4 : Octet
   O11L O11U O12L O12U O21L O21U O22L O22U Ocarry : Octet

RULES
   eqBlock (buildBlock (O1, O2, O3, O4), buildBlock (O'1, O'2, O'3, O'4)) -> andBool (andBool (eqOctet (O1, O'1), eqOctet (O2, O'2)), andBool (eqOctet (O3, O'3), eqOctet (O4, O'4)))

   andBlock (buildBlock (O1, O2, O3, O4), buildBlock (O'1, O'2, O'3, O'4)) -> buildBlock (andOctet (O1, O'1), andOctet (O2, O'2), andOctet (O3, O'3), andOctet (O4, O'4))

   orBlock (buildBlock (O1, O2, O3, O4), buildBlock (O'1, O'2, O'3, O'4)) -> buildBlock (orOctet (O1, O'1), orOctet (O2, O'2), orOctet (O3, O'3), orOctet (O4, O'4))

   xorBlock (buildBlock (O1, O2, O3, O4), buildBlock (O'1, O'2, O'3, O'4)) -> buildBlock (xorOctet (O1, O'1), xorOctet (O2, O'2), xorOctet (O3, O'3), xorOctet (O4, O'4))

   HalfU (buildBlock (O1, O2, O3, O4)) -> buildHalf (O1, O2)
   HalfL (buildBlock (O1, O2, O3, O4)) -> buildHalf (O3, O4)

   mulHalf (buildHalf (O1, O2), buildHalf (O'1, O'2)) -> mulHalfA (mulOctet (O1, O'1), mulOctet (O1, O'2), mulOctet (O2, O'1), mulOctet (O2, O'2))

   mulHalfA (buildHalf (O11U, O11L), buildHalf (O12U, O12L), buildHalf (O21U, O21L), buildHalf (O22U, O22L)) -> mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L; O22U; O22L)

   mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L; O22U; O"4) -> mulHalf3 (O11U, O11L, O12U, O21U; addHalfOctet (O12L, addHalfOctets (O21L, O22U)); O"4)

   mulHalf3 (O11U, O11L, O12U, O21U; buildHalf (Ocarry, O"3); O"4) -> mulHalf2 (O11U; addHalfOctet (Ocarry, addHalfOctet (O11L, addHalfOctets (O12U, O21U))); O"3, O"4)

   mulHalf2 (O11U; buildHalf (Ocarry, O"2); O"3, O"4) -> mulHalf1 (addHalfOctets (Ocarry, O11U); O"2; O"3, O"4)

   mulHalf1 (buildHalf (Ocarry, O"1); O"2; O"3, O"4) -> buildBlock (O"1, O"2, O"3, O"4)
   # assert eqOctet (Ocarry, x00)

EVAL

END-SPEC
