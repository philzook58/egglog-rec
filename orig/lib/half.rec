REC-SPEC Half # imports Bool Bit Octet OctetSum

# Half (16-bit machine words) with 8x8 binary multiplier - H. Garavel 2016, 2019

SORTS
   Half

CONS
   buildHalf : Octet Octet -> Half
   # the first argument of buildHalf contain the most significant bits

OPNS
   eqHalf : Half Half -> Bool

   x0000 : -> Half
   x0001 : -> Half

   mulOctet : Octet Octet -> Half
   # the 1st octet of the Half result is the highMul
   # the 2nd octet of the Half result is the lowMul

   mulOctet1 : Bit Bit Bit Bit Bit Bit Bit Bit Octet Half -> Half
   mulOctet2 : Bit Bit Bit Bit Bit Bit Bit Octet Half -> Half
   mulOctet3 : Bit Bit Bit Bit Bit Bit Octet Half -> Half
   mulOctet4 : Bit Bit Bit Bit Bit Octet Half -> Half
   mulOctet5 : Bit Bit Bit Bit Octet Half -> Half
   mulOctet6 : Bit Bit Bit Octet Half -> Half
   mulOctet7 : Bit Bit Octet Half -> Half
   mulOctet8 : Bit Octet Half -> Half

   mulOctetA : Half Octet Octet -> Half
   mulOctetB : Octet OctetSum -> Half

VARS
   B1 B2 B3 B4 B5 B6 B7 B8 : Bit
   O O' O1 O2 O'1 O'2 : Octet
   H : Half

RULES
   eqHalf (buildHalf (O1, O2), buildHalf (O'1, O'2)) -> andBool (eqOctet (O1, O'1), eqOctet (O2, O'2))

   x0000 -> buildHalf (x00, x00)

   x0001 -> buildHalf (x00, x01)

   mulOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), O') -> mulOctet1 (B1, B2, B3, B4, B5, B6, B7, B8, O', x0000)

   mulOctet1 (x0, B2, B3, B4, B5, B6, B7, B8, O', H) -> mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O', H)
   mulOctet1 (x1, B2, B3, B4, B5, B6, B7, B8, O', H) -> mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O', mulOctetA (H, rightOctet1 (O'), leftOctet7 (O')))

   mulOctet2 (x0, B3, B4, B5, B6, B7, B8, O', H) -> mulOctet3 (B3, B4, B5, B6, B7, B8, O', H)
   mulOctet2 (x1, B3, B4, B5, B6, B7, B8, O', H) -> mulOctet3 (B3, B4, B5, B6, B7, B8, O', mulOctetA (H, rightOctet2 (O'), leftOctet6 (O')))

   mulOctet3 (x0, B4, B5, B6, B7, B8, O', H) -> mulOctet4 (B4, B5, B6, B7, B8, O', H)
   mulOctet3 (x1, B4, B5, B6, B7, B8, O', H) -> mulOctet4 (B4, B5, B6, B7, B8, O', mulOctetA (H, rightOctet3 (O'), leftOctet5 (O')))

   mulOctet4 (x0, B5, B6, B7, B8, O', H) -> mulOctet5 (B5, B6, B7, B8, O', H)
   mulOctet4 (x1, B5, B6, B7, B8, O', H) -> mulOctet5 (B5, B6, B7, B8, O', mulOctetA (H, rightOctet4 (O'), leftOctet4 (O')))

   mulOctet5 (x0, B6, B7, B8, O', H) -> mulOctet6 (B6, B7, B8, O', H)
   mulOctet5 (x1, B6, B7, B8, O', H) -> mulOctet6 (B6, B7, B8, O', mulOctetA (H, rightOctet5 (O'), leftOctet3 (O')))

   mulOctet6 (x0, B7, B8, O', H) -> mulOctet7 (B7, B8, O', H)
   mulOctet6 (x1, B7, B8, O', H) -> mulOctet7 (B7, B8, O', mulOctetA (H, rightOctet6 (O'), leftOctet2 (O')))

   mulOctet7 (x0, B8, O', H) -> mulOctet8 (B8, O', H)
   mulOctet7 (x1, B8, O', H) -> mulOctet8 (B8, O', mulOctetA (H, rightOctet7 (O'), leftOctet1 (O')))

   mulOctet8 (x0, O', H) -> H
   mulOctet8 (x1, O', H) -> mulOctetA (H, x00, O')

   mulOctetA (buildHalf (O1, O2), O'1, O'2) -> mulOctetB (addOctet (O1, O'1), addOctetSum (O2, O'2, x0))

   mulOctetB (O1, buildOctetSum (x0, O2)) -> buildHalf (O1, O2)
   mulOctetB (O1, buildOctetSum (x1, O2)) -> buildHalf (addOctet (O1, x01), O2)

EVAL

END-SPEC
