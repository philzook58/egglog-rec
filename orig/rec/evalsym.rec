REC-SPEC EvalSym
SORTS
  Bool Pos ENat SNat
CONS
  true : -> Bool
  false : -> Bool
  d1 : -> Pos
  cDub : Bool Pos -> Pos
  Exz : -> ENat
  Exs : ENat -> ENat
  Explus : ENat ENat -> ENat
  Exmult : ENat ENat -> ENat
  Exexp : ENat ENat -> ENat
  Z : -> SNat
  S : SNat -> SNat
OPNS
  eqBool : Bool Bool -> Bool
  and : Bool Bool -> Bool
  eqPos : Pos Pos -> Bool
  lambda0 : ENat -> Bool
  eq : SNat SNat -> Bool
  # ifthenelse : Bool SNat SNat -> SNat # removed by CONVECS (no lazy)
  succ17 : SNat -> SNat
  plus17 : SNat SNat -> SNat
  mult17 : SNat SNat -> SNat
  exp17 : SNat SNat -> SNat
  eval17 : ENat -> SNat
  evalsym17 : ENat -> SNat
  dec : ENat -> ENat
  two : -> ENat
  seventeen : -> ENat
  f : ENat -> Bool
VARS
  b c : Bool
  p q : Pos
  l m n o : ENat
  r t : SNat
RULES
  eqBool(true,b) -> b
  # eqBool(b,true) -> b #---- this equation created ambiguity for eqBool(true,true); it was replaced by the previous equation
  eqBool(false,true) -> false
  eqBool(false,false) -> true

  and(b,true) -> b
  and(b,false) -> false

  eqPos(d1,d1) -> true
  eqPos(d1,cDub(b,p)) -> false
  eqPos(cDub(b,p),d1) -> false
  eqPos(cDub(b,p),cDub(c,q)) -> and(eqBool(b,c), eqPos(p,q))
  # eqPos(cDub(b,p),cDub(b,q)) -> eqPos(p,q)
  # eqPos(cDub(false,p),cDub(true,q)) -> false
  # eqPos(cDub(true,p),cDub(false,q)) -> false
  # eqPos(p,q) -> true if p = q

  lambda0(m) -> eq(eval17(m),evalsym17(m))

  # ifthenelse(true,r,t) -> r
  # ifthenelse(false,r,t) -> t
  # ifthenelse(b,r,t) -> r if r = t    #---- redundant with previous equations

  eq(Z,Z) -> true
  eq(Z,S(r)) -> false
  eq(S(r),Z) -> false
  eq(S(r),S(t)) -> eq(r,t)
  # eq(r,t) -> true if r= t    #---- redundant with previous equations

  # original rule using lazy evaluation (short-circuits)
  # succ17(r) -> ifthenelse(eq(r,S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z))))))))))))))))),Z,S(r))
  succ17(r) -> Z if eq(r,S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z))))))))))))))))) = true
  succ17(r) -> S(r) if eq(r,S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z))))))))))))))))) = false

  plus17(r,Z) -> r
  plus17(r,S(t)) -> succ17(plus17(r,t))

  mult17(r,Z) -> Z
  mult17(r,S(t)) -> plus17(r,mult17(r,t))

  exp17(r,Z) -> succ17(Z)
  exp17(r,S(t)) -> mult17(r,exp17(r,t))

  eval17(Exz) -> Z
  eval17(Exs(n)) -> succ17(eval17(n))
  eval17(Explus(n,m)) -> plus17(eval17(n),eval17(m))
  eval17(Exmult(n,m)) -> mult17(eval17(n),eval17(m))
  eval17(Exexp(n,m)) -> exp17(eval17(n),eval17(m))

  evalsym17(Exz) -> Z
  evalsym17(Exs(n)) -> succ17(evalsym17(n))
  evalsym17(Explus(n,m)) -> plus17(evalsym17(n),evalsym17(m))
  evalsym17(Exmult(n,Exz)) -> Z
  evalsym17(Exmult(n,Exs(m))) -> evalsym17(Explus(Exmult(n,m),n))
  evalsym17(Exmult(n,Explus(m,o))) -> evalsym17(Explus(Exmult(n,m),Exmult(n,o)))
  evalsym17(Exmult(n,Exmult(m,o))) -> evalsym17(Exmult(Exmult(n,m),o))
  evalsym17(Exmult(n,Exexp(m,o))) -> evalsym17(Exmult(n,dec(Exexp(m,o))))
  evalsym17(Exexp(n,Exz)) -> succ17(Z)
  evalsym17(Exexp(n,Exs(m))) -> evalsym17(Exmult(Exexp(n,m),n))
  evalsym17(Exexp(n,Explus(m,o))) -> evalsym17(Exmult(Exexp(n,m),Exexp(n,o)))
  evalsym17(Exexp(n,Exmult(m,o))) -> evalsym17(Exexp(Exexp(n,m),o))
  evalsym17(Exexp(n,Exexp(m,o))) -> evalsym17(Exexp(n,dec(Exexp(m,o))))

  dec(Exexp(n,Exz)) -> Exs(Exz)
  dec(Exexp(n,Exs(m))) -> Exmult(Exexp(n,m),n)
  dec(Exexp(n,Explus(m,o))) -> Exmult(Exexp(n,m),Exexp(n,o))
  dec(Exexp(n,Exmult(m,o))) -> dec(Exexp(Exexp(n,m),o))
  dec(Exexp(n,Exexp(m,o))) -> dec(Exexp(n,dec(Exexp(m,o))))

  two -> Exs(Exs(Exz))

  seventeen -> Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exz))))))))))))))))))))))))

  f(m) -> lambda0(Exexp(two,m))

EVAL

   f(seventeen)
END-SPEC
