REC-SPEC BinarySearch
SORTS
  Bool Pos Int Nat
CONS
  T : -> Bool
  F : -> Bool
  One : -> Pos
  cDub : Bool Pos -> Pos
  cInt : Nat -> Int
  cNeg : Pos -> Int
  Zero : -> Nat
  cNat : Pos -> Nat
OPNS
  eqBool : Bool Bool -> Bool
  not : Bool -> Bool
  and : Bool Bool -> Bool
  eqPos : Pos Pos -> Bool
  lePos : Pos Pos -> Bool
  ltPos : Pos Pos -> Bool
  gePos : Pos Pos -> Bool
  succ2Pos : Pos -> Pos
  plusPos : Pos Pos -> Pos
  addc : Bool Pos Pos -> Pos
  lambda0 : Nat Nat Nat Nat -> Nat
  max2Int : Int Nat -> Nat
  min2 : Nat -> Int
  minus : Nat Nat -> Int
  eq : Nat Nat -> Bool
  ite : Bool Nat Nat -> Nat
  Pos2Nat : Pos -> Nat
  Nat2Pos : Nat -> Pos
  le : Nat Nat -> Bool
  lt : Nat Nat -> Bool
  ge : Nat Nat -> Bool
  max2 : Nat Nat -> Nat
  succ2 : Nat -> Pos
  pred2 : Pos -> Nat
  dub : Bool Nat -> Nat
  plusNatPos : Nat Pos -> Pos
  plus : Nat Nat -> Nat
  gtesubtp : Pos Pos -> Nat
  gtesubtn : Nat Nat -> Nat
  gtesubtb : Bool Pos Pos -> Nat
  dividePos : Pos Pos -> Nat
  divide : Nat Pos -> Nat
  f : Nat -> Nat
  bs : Nat Nat -> Nat
  bs2 : Nat Nat Nat -> Nat
VARS
  m n y x h : Nat
  b c d : Bool
  i j : Int
  p q : Pos
RULES
  eqBool(T,b) -> b
  # eqBool(b,T) -> b #---- this equation created ambiguity for eqBool(T,T); it was replaced by the previous equation
  eqBool(F,T) -> F
  eqBool(F,F) -> T

  and(T,b) -> b
  and(F,b) -> F

  not(T) -> F
  not(F) -> T

  eqPos(One,One) -> T
  eqPos(One,cDub(b,p)) -> F
  eqPos(cDub(b,p),One) -> F
  eqPos(cDub(b,p),cDub(c,q)) -> and(eqBool(b,c), eqPos(p,q))
  # eqPos(cDub(F,p),cDub(T,q)) -> F
  # eqPos(cDub(T,p),cDub(F,q)) -> F
  # eqPos(p,p) -> T

  lePos(One,p) -> T
  lePos(cDub(b,p),One) -> F
  lePos(cDub(b,p),cDub(c,q)) -> lePos(p,q) if b = c
  lePos(cDub(b,p),cDub(c,q)) -> lePos(p,q) if b <> c and-if b = F
  lePos(cDub(b,p),cDub(c,q)) -> ltPos(p,q) if b <> c and-if b = T
  # lePos(cDub(b,p),cDub(b,q)) -> lePos(p,q) #---- non-linear
  # lePos(cDub(F,p),cDub(T,q)) -> lePos(p,q) #---- redundant
  # lePos(cDub(T,p),cDub(F,q)) -> ltPos(p,q) #---- redundant


  ltPos(p,One) -> F
  ltPos(One,cDub(b,p)) -> T
  ltPos(cDub(b,p),cDub(c,q)) -> ltPos(p,q)   if b = c
  ltPos(cDub(b,p),cDub(c,q)) -> lePos(p,q)   if b <> c and-if b = F
  ltPos(cDub(b,p),cDub(c,q)) -> ltPos(p,q)   if b <> c and-if b = T
  # ltPos(cDub(b,p),cDub(b,q)) -> ltPos(p,q) #---- non-linear
  # ltPos(cDub(F,p),cDub(T,q)) -> lePos(p,q) #---- redundant
  # ltPos(cDub(T,p),cDub(F,q)) -> ltPos(p,q) #---- redundant


  gePos(p,q) -> lePos(q,p)

  succ2Pos(One) -> cDub(F,One)
  succ2Pos(cDub(F,p)) -> cDub(T,p)
  succ2Pos(cDub(T,p)) -> cDub(F,succ2Pos(p))

  plusPos(p,q) -> addc(F,p,q)

  addc(F,One,p) -> succ2Pos(p)
  addc(T,One,p) -> succ2Pos(succ2Pos(p))
  addc(F,p,One) -> succ2Pos(p)
  addc(T,p,One) -> succ2Pos(succ2Pos(p))
  addc(b,cDub(c,p),cDub(d,q)) -> cDub(b,addc(c,p,q))  if c = d
  addc(b,cDub(c,p),cDub(d,q)) -> cDub(not(b),addc(b,p,q)) if c <> d
  # addc(b,cDub(c,p),cDub(c,q)) -> cDub(b,addc(c,p,q))   #---- non-linear on C
  # addc(b,cDub(F,p),cDub(T,q)) -> cDub(not(b),addc(b,p,q))  #---- redundant
  # addc(b,cDub(T,p),cDub(F,q)) -> cDub(not(b),addc(b,p,q))  #---- redundant

  lambda0(n,y,x,h) -> bs2(n,h,y) if lt(f(h),n) = T
  lambda0(n,y,x,h) -> bs2(n,x,h) if lt(f(h),n) = F

  max2Int(cInt(m),n) -> max2(m,n)
  max2Int(cNeg(p),n) -> n

  min2(Zero) -> cInt(Zero)
  min2(cNat(p)) -> cNeg(p)

  minus(m,n) -> cInt(gtesubtn(m,n)) if ge(m,n) = T
  minus(m,n) -> min2(gtesubtn(n,m)) if lt(m,n) = T

  eq(Zero,Zero) -> T
  eq(Zero,cNat(p)) -> F
  eq(cNat(p),Zero) -> F
  eq(cNat(p),cNat(q)) -> eqPos(p,q)
  # eq(n,n) -> T    #---- redundant with previous equations

  ite(T,m,n) -> m
  ite(F,m,n) -> n
  # ite(b,n,n) -> n    #---- redundant with previous equations

  Pos2Nat(p) -> cNat(p)

  Nat2Pos(cNat(p)) -> p

  le(Zero,n) -> T
  le(cNat(p),Zero) -> F
  le(cNat(p),cNat(q)) -> lePos(p,q)

  lt(n,Zero) -> F
  lt(Zero,cNat(p)) -> T
  lt(cNat(p),cNat(q)) -> ltPos(p,q)

  ge(m,n) -> le(n,m)

  max2(m,n) -> ite(le(m,n),n,m)

  succ2(Zero) -> One
  succ2(cNat(p)) -> succ2Pos(p)

  pred2(One) -> Zero
  pred2(cDub(T,p)) -> cNat(cDub(F,p))
  pred2(cDub(F,p)) -> dub(T,pred2(p))

  dub(F,Zero) -> Zero
  dub(T,Zero) -> cNat(One)
  dub(b,cNat(p)) -> cNat(cDub(b,p))

  plusNatPos(Zero,p) -> p
  plusNatPos(cNat(p),q) -> plusPos(p,q)

  plus(Zero,n) -> n
  plus(n,Zero) -> n
  plus(cNat(p),cNat(q)) -> cNat(addc(F,p,q))

  gtesubtp(p,q) -> gtesubtb(F,p,q)

  gtesubtn(n,Zero) -> n
  gtesubtn(cNat(p),cNat(q)) -> gtesubtp(p,q)

  gtesubtb(F,p,One) -> pred2(p)
  gtesubtb(T,p,One) -> pred2(Nat2Pos(pred2(p)))
  gtesubtb(b,cDub(c,p),cDub(d,q)) -> dub(b,gtesubtb(b,p,q))  if c = d
  # gtesubtb(b,cDub(c,p),cDub(c,q)) -> dub(b,gtesubtb(b,p,q)) #---- non-linear
  gtesubtb(b,cDub(c,p),cDub(d,q)) ->   dub(not(b),gtesubtb(d,p,q))  if c <> d
  # gtesubtb(b,cDub(F,p),cDub(T,q)) -> dub(not(b),gtesubtb(T,p,q)) # redundant
  # gtesubtb(b,cDub(T,p),cDub(F,q)) -> dub(not(b),gtesubtb(F,p,q)) # redundant

  dividePos(p,q) -> cNat(succ2(divide(gtesubtp(p,q),q))) if gePos(p,q) = T

  dividePos(p,q) -> Zero if ltPos(p,q) = T

  divide(Zero,p) -> Zero
  divide(cNat(p),q) -> dividePos(p,q)

  #f(n) -> ite(eq(n,Zero),Zero,ite(eq(n,Pos2Nat(One)),Pos2Nat(One),plus(f(max2Int(minus(n,Pos2Nat(One)),Zero)),f(max2Int(minus(n,Pos2Nat(cDub(F,One))),Zero)))))
  f(Zero) -> Zero
  f(cNat(One)) -> cNat(One)
  f(cNat(cDub(b,p))) -> plus(f(max2Int(minus(cNat(cDub(b,p)),Pos2Nat(One)),Zero)),f(max2Int(minus(cNat(cDub(b,p)),Pos2Nat(cDub(F,One))),Zero)))

  bs(n,m) -> bs2(n,Zero,m)

  bs2(n,x,y) -> x if eq(Pos2Nat(plusNatPos(x,One)),y) = T
  bs2(n,x,y) -> lambda0(n,y,x,divide(plus(x,y),cDub(F,One))) if eq(Pos2Nat(plusNatPos(x,One)),y) = F

EVAL

   bs(Pos2Nat(cDub(T,cDub(T,cDub(F,cDub(T,cDub(F,cDub(T,cDub(T,cDub(F,cDub(T,cDub(F,cDub(T,One)))))))))))),Pos2Nat(cDub(F,cDub(F,cDub(F,cDub(F,cDub(F,cDub(F,One))))))))

END-SPEC
