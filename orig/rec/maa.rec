REC-SPEC MAA : Bool Nat Bit Octet OctetSum Half HalfSum Block BlockSum Pair

# Message Authenticator Algorithm - Hubert Garavel and Lina Marsso 2017

SORTS
   Key Message SegmentedMessage

CONS

   # ************************ Key ********************************

   buildKey : Block Block -> Key

   # ************************ Message ********************************

   unitMessage : Block -> Message
   consMessage : Block Message -> Message

   # ************************ SegmentedMessage ***********************

   unitSegment : Message -> SegmentedMessage
   consSegment : Message SegmentedMessage -> SegmentedMessage

OPNS

   # note: notBool, xorBool are never used in maa.rec

   # ************************ NATURAL ********************************

   n254 : -> Nat
   n256 : -> Nat
   n4100 : -> Nat

   # ************************ BLOCK **********************************

   x00000000 : -> Block
   x00000001 : -> Block
   x00000002 : -> Block
   x00000003 : -> Block
   x00000004 : -> Block
   x00000005 : -> Block
   x00000006 : -> Block
   x00000007 : -> Block
   x00000008 : -> Block
   x00000009 : -> Block
   x0000000A : -> Block
   x0000000B : -> Block
   x0000000C : -> Block
   x0000000D : -> Block
   x0000000E : -> Block
   x0000000F : -> Block
   x00000010 : -> Block
   x00000012 : -> Block
   x00000014 : -> Block
   x00000016 : -> Block
   x00000018 : -> Block
   x0000001B : -> Block
   x0000001D : -> Block
   x0000001E : -> Block
   x0000001F : -> Block
   x00000031 : -> Block
   x00000036 : -> Block
   x00000060 : -> Block
   x00000080 : -> Block
   x000000A5 : -> Block
   x000000B6 : -> Block
   x000000C4 : -> Block
   x000000D2 : -> Block
   x00000100 : -> Block
   x00000129 : -> Block
   x0000018C : -> Block
   x00004000 : -> Block
   x00010000 : -> Block
   x00020000 : -> Block
   x00030000 : -> Block
   x00040000 : -> Block
   x00060000 : -> Block
   x00804021 : -> Block   # MAA special constant 'B'
   x00FF00FF : -> Block
   x0103050B : -> Block
   x01030703 : -> Block
   x01030705 : -> Block
   x0103070F : -> Block
   x02040801 : -> Block   # MAA special constant 'A'
   x0297AF6F : -> Block
   x07050301 : -> Block
   x077788A2 : -> Block
   x07C72EAA : -> Block
   x0A202020 : -> Block
   x0AD67E20 : -> Block
   x10000000 : -> Block
   x11A9D254 : -> Block
   x11AC46B8 : -> Block
   x1277A6D4 : -> Block
   x13647149 : -> Block
   x160EE9B5 : -> Block
   x17065DBB : -> Block
   x17A808FD : -> Block
   x1D10D8D3 : -> Block
   x1D3B7760 : -> Block
   x1D9C9655 : -> Block
   x1F3F7FFF : -> Block
   x204E80A7 : -> Block
   x21D869BA : -> Block
   x24B66FB5 : -> Block
   x270EEDAF : -> Block
   x277B4B25 : -> Block
   x2829040B : -> Block
   x288FC786 : -> Block
   x28EAD8B3 : -> Block
   x29907CD8 : -> Block
   x29C1485F : -> Block
   x29EEE96B : -> Block
   x2A6091AE : -> Block
   x2BF8499A : -> Block
   x2E80AC30 : -> Block
   x2FD76FFB : -> Block
   x30261492 : -> Block
   x303FF4AA : -> Block
   x33D5A466 : -> Block
   x344925FC : -> Block
   x34ACF886 : -> Block
   x3CD54DEB : -> Block
   x3CF3A7D2 : -> Block
   x3DD81AC6 : -> Block
   x3F6F7248 : -> Block
   x48B204D6 : -> Block
   x4A645A01 : -> Block
   x4C49AAE0 : -> Block
   x4CE933E1 : -> Block
   x4D53901A : -> Block
   x4DA124A1 : -> Block
   x4F998E01 : -> Block
   x4FB1138A : -> Block
   x50DEC930 : -> Block
   x51AF3C1D : -> Block
   x51EDE9C7 : -> Block
   x550D91CE : -> Block
   x55555555 : -> Block
   x55DD063F : -> Block
   x5834A585 : -> Block
   x5A35D667 : -> Block
   x5BC02502 : -> Block
   x5CCA3239 : -> Block
   x5EBA06C2 : -> Block
   x5F38EEF1 : -> Block
   x613F8E2A : -> Block
   x63C70DBA : -> Block
   x6AD6E8A4 : -> Block
   x6AEBACF8 : -> Block
   x6D67E884 : -> Block
   x7050EC5E : -> Block
   x717153D5 : -> Block
   x7201F4DC : -> Block
   x7397C9AE : -> Block
   x74B39176 : -> Block
   x76232E5F : -> Block
   x7783C51D : -> Block
   x7792F9D4 : -> Block
   x7BC180AB : -> Block
   x7DB2D9F4 : -> Block
   x7DFEFBFF : -> Block   # MAA special constant 'D'
   x7F76A3B0 : -> Block
   x7F839576 : -> Block
   x7FFFFFF0 : -> Block
   x7FFFFFF1 : -> Block
   x7FFFFFFC : -> Block
   x7FFFFFFD : -> Block
   x80000000 : -> Block
   x80000002 : -> Block
   x800000C2 : -> Block
   x80018000 : -> Block
   x80018001 : -> Block
   x80397302 : -> Block
   x81D10CA3 : -> Block
   x89D635D7 : -> Block
   x8CE37709 : -> Block
   x8DC8BBDE : -> Block
   x9115A558 : -> Block
   x91896CFA : -> Block
   x9372CDC6 : -> Block
   x98D1CC75 : -> Block
   x9D15C437 : -> Block
   x9DB15CF6 : -> Block
   x9E2E7B36 : -> Block
   xA018C83B : -> Block
   xA0B87B77 : -> Block
   xA44AAAC0 : -> Block
   xA511987A : -> Block
   xA70FC148 : -> Block
   xA93BD410 : -> Block
   xAAAAAAAA : -> Block
   xAB00FFCD : -> Block
   xAB01FCCD : -> Block
   xAB6EED4A : -> Block
   xABEEED6B : -> Block
   xACBC13DD : -> Block
   xB1CC1CC5 : -> Block
   xB8142629 : -> Block
   xB99A62DE : -> Block
   xBA92DB12 : -> Block
   xBBA57835 : -> Block
   xBE9F0917 : -> Block
   xBF2D7D85 : -> Block
   xBFEF7FDF : -> Block   # MAA special constant 'C'
   xC1ED90DD : -> Block
   xC21A1846 : -> Block
   xC4EB1AEB : -> Block
   xC6B1317E : -> Block
   xCBC865BA : -> Block
   xCD959B46 : -> Block
   xD0482465 : -> Block
   xD636250D : -> Block
   xD7843FDC : -> Block
   xD78634BC : -> Block
   xD8804CA5 : -> Block
   xDB79FBDC : -> Block
   xDB9102B0 : -> Block
   xE0C08000 : -> Block
   xE6A12F07 : -> Block
   xEB35B97F : -> Block
   xF0239DD5 : -> Block
   xF14D6E28 : -> Block
   xF2EF3501 : -> Block
   xF6A09667 : -> Block
   xFD297DA4 : -> Block
   xFDC1A8BA : -> Block
   xFE4E5BDD : -> Block
   xFEA1D334 : -> Block
   xFECCAA6E : -> Block
   xFEFC07F0 : -> Block
   xFF2D7DA5 : -> Block
   xFFEF0001 : -> Block
   xFFFF00FF : -> Block
   xFFFFFF2D : -> Block
   xFFFFFF3A : -> Block
   xFFFFFFF0 : -> Block
   xFFFFFFF1 : -> Block
   xFFFFFFF4 : -> Block
   xFFFFFFF5 : -> Block
   xFFFFFFF7 : -> Block
   xFFFFFFF9 : -> Block
   xFFFFFFFA : -> Block
   xFFFFFFFB : -> Block
   xFFFFFFFC : -> Block
   xFFFFFFFD : -> Block
   xFFFFFFFE : -> Block
   xFFFFFFFF : -> Block

   # ************************ Message ********************************

   appendMessage : Message Block -> Message
   reverseMessage : Message -> Message
   makeMessage : Nat Block Block -> Message

   # ************************ SegmentedMessage ***********************

   splitSegment : Message -> SegmentedMessage
   cutSegment : Message Message Nat -> SegmentedMessage

   # ************************ First set of MAA functions ************

   ADD : Block Block -> Block
   AND : Block Block -> Block
   MUL : Block Block -> Pair
   OR : Block Block -> Block
   XOR : Block Block -> Block

   XOR' : Pair -> Block    # this function was called R in [Munster-91-a]

   CYC : Block -> Block
   nCYC : Nat Block -> Block
   FIX1 : Block -> Block
   FIX2 : Block -> Block

   needAdjust : Octet -> Bool
   adjustCode : Octet -> Bit
   adjust : Octet Octet -> Octet

   PAT : Block Block -> Octet
   BYT : Block Block -> Pair
   BYT' : Octet Octet Octet Octet Octet Octet Octet Octet Octet -> Pair

   ADDC : Block Block -> Pair
   ADDC' : BlockSum -> Pair

   # ************************ Second set of MAA functions ************

   MUL1 : Block Block -> Block
   MUL1XY : Pair -> Block
   MUL1UL : Block Block -> Block
   MUL1SC : Pair -> Block

   MUL2 : Block Block -> Block
   MUL2XY : Pair -> Block
   MUL2UL : Block Block -> Block
   MUL2DEL : Pair Block -> Block
   MUL2FL : Block Block -> Block
   MUL2SC : Pair -> Block

   MUL2A : Block Block -> Block
   MUL2AXY : Pair -> Block
   MUL2AUL : Block Block -> Block
   MUL2ADL : Block Block -> Block
   MUL2ASC : Pair -> Block

   # ************************ Third set of MAA functions ************

   squareHalf : Half -> Block
   Q : Octet -> Block
   H4 : Block -> Block
   H6 : Block -> Block
   H8 : Block -> Block
   H0 : Block -> Block
   H5 : Block Octet -> Block
   H7 : Block -> Block
   H9 : Block  -> Block
   J1_2 : Block -> Block
   J1_4 : Block -> Block
   J1_6 : Block -> Block
   J1_8 : Block -> Block
   J2_2 : Block -> Block
   J2_4 : Block -> Block
   J2_6 : Block -> Block
   J2_8 : Block -> Block
   K1_2 : Block -> Block
   K1_4 : Block -> Block
   K1_5 : Block -> Block
   K1_7 : Block -> Block
   K1_9 : Block -> Block
   K2_2 : Block -> Block
   K2_4 : Block -> Block
   K2_5 : Block -> Block
   K2_7 : Block -> Block
   K2_9 : Block -> Block

   # ********* MAA  *********

   preludeXY : Block Block -> Pair
   preludeVW : Block Block -> Pair
   preludeST : Block Block -> Pair

   preludeXY' : Pair Octet -> Pair # this function was called f in [Munster-91-a]
   preludeVW' : Pair -> Pair       # this function was called f in [Munster-91-a]
   preludeST' : Pair -> Pair       # this function was called f in [Munster-91-a]

   computeXY : Pair Pair Block -> Pair # this function was called mainLoop
   computeXY' : Pair Block Block -> Pair # this function was called mainLoopCore
   computeVW : Pair -> Pair # this function was called mainLoop
   loop1 : Pair Pair Message -> Pair # this function was called mainLoopRepeated
   loop2 : Pair Pair Message -> Pair # this function was called mainLoopRepeated

   coda : Pair Pair Pair -> Block

   MAA : Key Message -> Block
   MAA' : Pair Pair Pair Message -> Block

   MAC : Key Message -> Block
   MACfirst : Key SegmentedMessage -> Block
   MACnext : Key Block SegmentedMessage -> Block

VARS

   N N' : Nat

   B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 B11 B12 B13 B14 B15 B16 B17 B18 B19 B20 B21 B22 B23 B24 B25 B26 B27 B28 B29 B30 B31 B32 : Bit

   O O' O1 O2 O3 O4 O'1 O'2 O'3 O'4 Opat : Octet

   H : Half

   W W' W1 W2 Wcarry : Block

   P P' P1 P2 P3 : Pair

   K : Key

   M M' : Message

   S : SegmentedMessage

RULES

# ----------------------------------------------------------------------------

# rules defining the non-constructors of sort Nat

   n254 -> addNat (n12, mulNat (n11, n22))

   n256 -> mulNat (n16, n16)

   n4100 -> addNat (n4, mulNat (n16, n256))

# ----------------------------------------------------------------------------

   x00000000 -> buildBlock (x00, x00, x00, x00)
   x00000001 -> buildBlock (x00, x00, x00, x01)
   x00000002 -> buildBlock (x00, x00, x00, x02)
   x00000003 -> buildBlock (x00, x00, x00, x03)
   x00000004 -> buildBlock (x00, x00, x00, x04)
   x00000005 -> buildBlock (x00, x00, x00, x05)
   x00000006 -> buildBlock (x00, x00, x00, x06)
   x00000007 -> buildBlock (x00, x00, x00, x07)
   x00000008 -> buildBlock (x00, x00, x00, x08)
   x00000009 -> buildBlock (x00, x00, x00, x09)
   x0000000A -> buildBlock (x00, x00, x00, x0A)
   x0000000B -> buildBlock (x00, x00, x00, x0B)
   x0000000C -> buildBlock (x00, x00, x00, x0C)
   x0000000D -> buildBlock (x00, x00, x00, x0D)
   x0000000E -> buildBlock (x00, x00, x00, x0E)
   x0000000F -> buildBlock (x00, x00, x00, x0F)
   x00000010 -> buildBlock (x00, x00, x00, x10)
   x00000012 -> buildBlock (x00, x00, x00, x12)
   x00000014 -> buildBlock (x00, x00, x00, x14)
   x00000016 -> buildBlock (x00, x00, x00, x16)
   x00000018 -> buildBlock (x00, x00, x00, x18)
   x0000001B -> buildBlock (x00, x00, x00, x1B)
   x0000001D -> buildBlock (x00, x00, x00, x1D)
   x0000001E -> buildBlock (x00, x00, x00, x1E)
   x0000001F -> buildBlock (x00, x00, x00, x1F)
   x00000031 -> buildBlock (x00, x00, x00, x31)
   x00000036 -> buildBlock (x00, x00, x00, x36)
   x00000060 -> buildBlock (x00, x00, x00, x60)
   x00000080 -> buildBlock (x00, x00, x00, x80)
   x000000A5 -> buildBlock (x00, x00, x00, xA5)
   x000000B6 -> buildBlock (x00, x00, x00, xB6)
   x000000C4 -> buildBlock (x00, x00, x00, xC4)
   x000000D2 -> buildBlock (x00, x00, x00, xD2)
   x00000100 -> buildBlock (x00, x00, x01, x00)
   x00000129 -> buildBlock (x00, x00, x01, x29)
   x0000018C -> buildBlock (x00, x00, x01, x8C)
   x00004000 -> buildBlock (x00, x00, x40, x00)
   x00010000 -> buildBlock (x00, x01, x00, x00)
   x00020000 -> buildBlock (x00, x02, x00, x00)
   x00030000 -> buildBlock (x00, x03, x00, x00)
   x00040000 -> buildBlock (x00, x04, x00, x00)
   x00060000 -> buildBlock (x00, x06, x00, x00)
   x00804021 -> buildBlock (x00, x80, x40, x21)   # MAA special constant 'B'
   x00FF00FF -> buildBlock (x00, xFF, x00, xFF)
   x0103050B -> buildBlock (x01, x03, x05, x0B)
   x01030703 -> buildBlock (x01, x03, x07, x03)
   x01030705 -> buildBlock (x01, x03, x07, x05)
   x0103070F -> buildBlock (x01, x03, x07, x0F)
   x02040801 -> buildBlock (x02, x04, x08, x01)   # MAA special constant 'A'
   x0297AF6F -> buildBlock (x02, x97, xAF, x6F)
   x07050301 -> buildBlock (x07, x05, x03, x01)
   x077788A2 -> buildBlock (x07, x77, x88, xA2)
   x07C72EAA -> buildBlock (x07, xC7, x2E, xAA)
   x0A202020 -> buildBlock (x0A, x20, x20, x20)
   x0AD67E20 -> buildBlock (x0A, xD6, x7E, x20)
   x10000000 -> buildBlock (x10, x00, x00, x00)
   x11A9D254 -> buildBlock (x11, xA9, xD2, x54)
   x11AC46B8 -> buildBlock (x11, xAC, x46, xB8)
   x1277A6D4 -> buildBlock (x12, x77, xA6, xD4)
   x13647149 -> buildBlock (x13, x64, x71, x49)
   x160EE9B5 -> buildBlock (x16, x0E, xE9, xB5)
   x17065DBB -> buildBlock (x17, x06, x5D, xBB)
   x17A808FD -> buildBlock (x17, xA8, x08, xFD)
   x1D10D8D3 -> buildBlock (x1D, x10, xD8, xD3)
   x1D3B7760 -> buildBlock (x1D, x3B, x77, x60)
   x1D9C9655 -> buildBlock (x1D, x9C, x96, x55)
   x1F3F7FFF -> buildBlock (x1F, x3F, x7F, xFF)
   x204E80A7 -> buildBlock (x20, x4E, x80, xA7)
   x21D869BA -> buildBlock (x21, xD8, x69, xBA)
   x24B66FB5 -> buildBlock (x24, xB6, x6F, xB5)
   x270EEDAF -> buildBlock (x27, x0E, xED, xAF)
   x277B4B25 -> buildBlock (x27, x7B, x4B, x25)
   x2829040B -> buildBlock (x28, x29, x04, x0B)
   x288FC786 -> buildBlock (x28, x8F, xC7, x86)
   x28EAD8B3 -> buildBlock (x28, xEA, xD8, xB3)
   x29907CD8 -> buildBlock (x29, x90, x7C, xD8)
   x29C1485F -> buildBlock (x29, xC1, x48, x5F)
   x29EEE96B -> buildBlock (x29, xEE, xE9, x6B)
   x2A6091AE -> buildBlock (x2A, x60, x91, xAE)
   x2BF8499A -> buildBlock (x2B, xF8, x49, x9A)
   x2E80AC30 -> buildBlock (x2E, x80, xAC, x30)
   x2FD76FFB -> buildBlock (x2F, xD7, x6F, xFB)
   x30261492 -> buildBlock (x30, x26, x14, x92)
   x303FF4AA -> buildBlock (x30, x3F, xF4, xAA)
   x33D5A466 -> buildBlock (x33, xD5, xA4, x66)
   x344925FC -> buildBlock (x34, x49, x25, xFC)
   x34ACF886 -> buildBlock (x34, xAC, xF8, x86)
   x3CD54DEB -> buildBlock (x3C, xD5, x4D, xEB)
   x3CF3A7D2 -> buildBlock (x3C, xF3, xA7, xD2)
   x3DD81AC6 -> buildBlock (x3D, xD8, x1A, xC6)
   x3F6F7248 -> buildBlock (x3F, x6F, x72, x48)
   x48B204D6 -> buildBlock (x48, xB2, x04, xD6)
   x4A645A01 -> buildBlock (x4A, x64, x5A, x01)
   x4C49AAE0 -> buildBlock (x4C, x49, xAA, xE0)
   x4CE933E1 -> buildBlock (x4C, xE9, x33, xE1)
   x4D53901A -> buildBlock (x4D, x53, x90, x1A)
   x4DA124A1 -> buildBlock (x4D, xA1, x24, xA1)
   x4F998E01 -> buildBlock (x4F, x99, x8E, x01)
   x4FB1138A -> buildBlock (x4F, xB1, x13, x8A)
   x50DEC930 -> buildBlock (x50, xDE, xC9, x30)
   x51AF3C1D -> buildBlock (x51, xAF, x3C, x1D)
   x51EDE9C7 -> buildBlock (x51, xED, xE9, xC7)
   x550D91CE -> buildBlock (x55, x0D, x91, xCE)
   x55555555 -> buildBlock (x55, x55, x55, x55)
   x55DD063F -> buildBlock (x55, xDD, x06, x3F)
   x5834A585 -> buildBlock (x58, x34, xA5, x85)
   x5A35D667 -> buildBlock (x5A, x35, xD6, x67)
   x5BC02502 -> buildBlock (x5B, xC0, x25, x02)
   x5CCA3239 -> buildBlock (x5C, xCA, x32, x39)
   x5EBA06C2 -> buildBlock (x5E, xBA, x06, xC2)
   x5F38EEF1 -> buildBlock (x5F, x38, xEE, xF1)
   x613F8E2A -> buildBlock (x61, x3F, x8E, x2A)
   x63C70DBA -> buildBlock (x63, xC7, x0D, xBA)
   x6AD6E8A4 -> buildBlock (x6A, xD6, xE8, xA4)
   x6AEBACF8 -> buildBlock (x6A, xEB, xAC, xF8)
   x6D67E884 -> buildBlock (x6D, x67, xE8, x84)
   x7050EC5E -> buildBlock (x70, x50, xEC, x5E)
   x717153D5 -> buildBlock (x71, x71, x53, xD5)
   x7201F4DC -> buildBlock (x72, x01, xF4, xDC)
   x7397C9AE -> buildBlock (x73, x97, xC9, xAE)
   x74B39176 -> buildBlock (x74, xB3, x91, x76)
   x76232E5F -> buildBlock (x76, x23, x2E, x5F)
   x7783C51D -> buildBlock (x77, x83, xC5, x1D)
   x7792F9D4 -> buildBlock (x77, x92, xF9, xD4)
   x7BC180AB -> buildBlock (x7B, xC1, x80, xAB)
   x7DB2D9F4 -> buildBlock (x7D, xB2, xD9, xF4)
   x7DFEFBFF -> buildBlock (x7D, xFE, xFB, xFF)   # MAA special constant 'D'
   x7F76A3B0 -> buildBlock (x7F, x76, xA3, xB0)
   x7F839576 -> buildBlock (x7F, x83, x95, x76)
   x7FFFFFF0 -> buildBlock (x7F, xFF, xFF, xF0)
   x7FFFFFF1 -> buildBlock (x7F, xFF, xFF, xF1)
   x7FFFFFFC -> buildBlock (x7F, xFF, xFF, xFC)
   x7FFFFFFD -> buildBlock (x7F, xFF, xFF, xFD)
   x80000000 -> buildBlock (x80, x00, x00, x00)
   x80000002 -> buildBlock (x80, x00, x00, x02)
   x800000C2 -> buildBlock (x80, x00, x00, xC2)
   x80018000 -> buildBlock (x80, x01, x80, x00)
   x80018001 -> buildBlock (x80, x01, x80, x01)
   x80397302 -> buildBlock (x80, x39, x73, x02)
   x81D10CA3 -> buildBlock (x81, xD1, x0C, xA3)
   x89D635D7 -> buildBlock (x89, xD6, x35, xD7)
   x8CE37709 -> buildBlock (x8C, xE3, x77, x09)
   x8DC8BBDE -> buildBlock (x8D, xC8, xBB, xDE)
   x9115A558 -> buildBlock (x91, x15, xA5, x58)
   x91896CFA -> buildBlock (x91, x89, x6C, xFA)
   x9372CDC6 -> buildBlock (x93, x72, xCD, xC6)
   x98D1CC75 -> buildBlock (x98, xD1, xCC, x75)
   x9D15C437 -> buildBlock (x9D, x15, xC4, x37)
   x9DB15CF6 -> buildBlock (x9D, xB1, x5C, xF6)
   x9E2E7B36 -> buildBlock (x9E, x2E, x7B, x36)
   xA018C83B -> buildBlock (xA0, x18, xC8, x3B)
   xA0B87B77 -> buildBlock (xA0, xB8, x7B, x77)
   xA44AAAC0 -> buildBlock (xA4, x4A, xAA, xC0)
   xA511987A -> buildBlock (xA5, x11, x98, x7A)
   xA70FC148 -> buildBlock (xA7, x0F, xC1, x48)
   xA93BD410 -> buildBlock (xA9, x3B, xD4, x10)
   xAAAAAAAA -> buildBlock (xAA, xAA, xAA, xAA)
   xAB00FFCD -> buildBlock (xAB, x00, xFF, xCD)
   xAB01FCCD -> buildBlock (xAB, x01, xFC, xCD)
   xAB6EED4A -> buildBlock (xAB, x6E, xED, x4A)
   xABEEED6B -> buildBlock (xAB, xEE, xED, x6B)
   xACBC13DD -> buildBlock (xAC, xBC, x13, xDD)
   xB1CC1CC5 -> buildBlock (xB1, xCC, x1C, xC5)
   xB8142629 -> buildBlock (xB8, x14, x26, x29)
   xB99A62DE -> buildBlock (xB9, x9A, x62, xDE)
   xBA92DB12 -> buildBlock (xBA, x92, xDB, x12)
   xBBA57835 -> buildBlock (xBB, xA5, x78, x35)
   xBE9F0917 -> buildBlock (xBE, x9F, x09, x17)
   xBF2D7D85 -> buildBlock (xBF, x2D, x7D, x85)
   xBFEF7FDF -> buildBlock (xBF, xEF, x7F, xDF)   # MAA special constant 'C'
   xC1ED90DD -> buildBlock (xC1, xED, x90, xDD)
   xC21A1846 -> buildBlock (xC2, x1A, x18, x46)
   xC4EB1AEB -> buildBlock (xC4, xEB, x1A, xEB)
   xC6B1317E -> buildBlock (xC6, xB1, x31, x7E)
   xCBC865BA -> buildBlock (xCB, xC8, x65, xBA)
   xCD959B46 -> buildBlock (xCD, x95, x9B, x46)
   xD0482465 -> buildBlock (xD0, x48, x24, x65)
   xD636250D -> buildBlock (xD6, x36, x25, x0D)
   xD7843FDC -> buildBlock (xD7, x84, x3F, xDC)
   xD78634BC -> buildBlock (xD7, x86, x34, xBC)
   xD8804CA5 -> buildBlock (xD8, x80, x4C, xA5)
   xDB79FBDC -> buildBlock (xDB, x79, xFB, xDC)
   xDB9102B0 -> buildBlock (xDB, x91, x02, xB0)
   xE0C08000 -> buildBlock (xE0, xC0, x80, x00)
   xE6A12F07 -> buildBlock (xE6, xA1, x2F, x07)
   xEB35B97F -> buildBlock (xEB, x35, xB9, x7F)
   xF0239DD5 -> buildBlock (xF0, x23, x9D, xD5)
   xF14D6E28 -> buildBlock (xF1, x4D, x6E, x28)
   xF2EF3501 -> buildBlock (xF2, xEF, x35, x01)
   xF6A09667 -> buildBlock (xF6, xA0, x96, x67)
   xFD297DA4 -> buildBlock (xFD, x29, x7D, xA4)
   xFDC1A8BA -> buildBlock (xFD, xC1, xA8, xBA)
   xFE4E5BDD -> buildBlock (xFE, x4E, x5B, xDD)
   xFEA1D334 -> buildBlock (xFE, xA1, xD3, x34)
   xFECCAA6E -> buildBlock (xFE, xCC, xAA, x6E)
   xFEFC07F0 -> buildBlock (xFE, xFC, x07, xF0)
   xFF2D7DA5 -> buildBlock (xFF, x2D, x7D, xA5)
   xFFEF0001 -> buildBlock (xFF, xEF, x00, x01)
   xFFFF00FF -> buildBlock (xFF, xFF, x00, xFF)
   xFFFFFF2D -> buildBlock (xFF, xFF, xFF, x2D)
   xFFFFFF3A -> buildBlock (xFF, xFF, xFF, x3A)
   xFFFFFFF0 -> buildBlock (xFF, xFF, xFF, xF0)
   xFFFFFFF1 -> buildBlock (xFF, xFF, xFF, xF1)
   xFFFFFFF4 -> buildBlock (xFF, xFF, xFF, xF4)
   xFFFFFFF5 -> buildBlock (xFF, xFF, xFF, xF5)
   xFFFFFFF7 -> buildBlock (xFF, xFF, xFF, xF7)
   xFFFFFFF9 -> buildBlock (xFF, xFF, xFF, xF9)
   xFFFFFFFA -> buildBlock (xFF, xFF, xFF, xFA)
   xFFFFFFFB -> buildBlock (xFF, xFF, xFF, xFB)
   xFFFFFFFC -> buildBlock (xFF, xFF, xFF, xFC)
   xFFFFFFFD -> buildBlock (xFF, xFF, xFF, xFD)
   xFFFFFFFE -> buildBlock (xFF, xFF, xFF, xFE)
   xFFFFFFFF -> buildBlock (xFF, xFF, xFF, xFF)

# ----------------------------------------------------------------------------

   appendMessage (unitMessage (W), W') -> consMessage (W, unitMessage (W'))
   appendMessage (consMessage (W, M), W') -> consMessage (W, appendMessage (M, W'))

   reverseMessage (unitMessage (W)) -> unitMessage (W)
   reverseMessage (consMessage (W, M)) -> appendMessage (reverseMessage (M), W)

   makeMessage (succNat (N), W, W') -> unitMessage (W) if eqNat (N, n0) = true
   makeMessage (succNat (N), W, W') -> consMessage (W, makeMessage (N, ADD (W, W'), W')) if eqNat (N, n0) = false

# ----------------------------------------------------------------------------

# first set of MAA-specific cryptographic functions

   ADD (W, W') -> addBlock (W, W')

   AND (W, W') -> andBlock (W, W')

   MUL (W, W') -> mulBlock (W, W')

   OR (W, W') -> orBlock (W, W')

   XOR (W, W') -> xorBlock (W, W')

   XOR' (buildPair (W, W')) -> XOR (W, W')

   CYC (buildBlock (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B9, B10, B11, B12, B13, B14, B15, B16), buildOctet (B17, B18, B19, B20, B21, B22, B23, B24), buildOctet (B25, B26, B27, B28, B29, B30, B31, B32))) -> buildBlock (buildOctet (B2, B3, B4, B5, B6, B7, B8, B9), buildOctet (B10, B11, B12, B13, B14, B15, B16, B17), buildOctet (B18, B19, B20, B21, B22, B23, B24, B25), buildOctet (B26, B27, B28, B29, B30, B31, B32, B1))

   nCYC (n0, W) -> W
   nCYC (succNat (N), W) -> CYC (nCYC (N, W))

   FIX1 (W) -> AND (OR (W, x02040801), xBFEF7FDF)   # A = x02040801, C = xBFEF7FDF

   FIX2 (W) -> AND (OR (W, x00804021), x7DFEFBFF)   # B = x00804021, D = x7DFEFBFF

   needAdjust (O) -> orBool (eqOctet (O, x00), eqOctet (O, xFF))

   adjustCode (O) -> x1 if needAdjust (O) = true
   adjustCode (O) -> x0 if needAdjust (O) = false

   adjust (O, O') -> xorOctet (O, O') if needAdjust (O) = true
   adjust (O, O') -> O                if needAdjust (O) = false

   PAT (buildBlock (O1, O2, O3, O4), buildBlock (O'1, O'2, O'3, O'4)) -> buildOctet (adjustCode (O1), adjustCode (O2), adjustCode (O3), adjustCode (O4), adjustCode (O'1), adjustCode (O'2), adjustCode (O'3), adjustCode (O'4))

   BYT (buildBlock (O1, O2, O3, O4), buildBlock (O'1, O'2, O'3, O'4)) -> BYT' (O1, O2, O3, O4, O'1, O'2, O'3, O'4, PAT (buildBlock (O1, O2, O3, O4), buildBlock (O'1, O'2, O'3, O'4)))

   BYT' (O1, O2, O3, O4, O'1, O'2, O'3, O'4, Opat) -> buildPair (buildBlock (adjust (O1, rightOctet7 (Opat)), adjust (O2, rightOctet6 (Opat)), adjust (O3, rightOctet5 (Opat)), adjust (O4, rightOctet4 (Opat))), buildBlock (adjust (O'1, rightOctet3 (Opat)), adjust (O'2, rightOctet2 (Opat)), adjust (O'3, rightOctet1 (Opat)), adjust (O'4, Opat)))

   ADDC (W, W') -> ADDC' (addBlockSum (W, W'))

   ADDC' (buildBlockSum (x0, W)) -> buildPair (x00000000, W)
   ADDC' (buildBlockSum (x1, W)) -> buildPair (x00000001, W)

# second set of MAA-specific cryptographic functions

   MUL1 (W, W') -> MUL1XY (MUL (W, W'))
   MUL1XY (buildPair (W, W')) -> MUL1UL (W, W')
   MUL1UL (W, W') -> MUL1SC (ADDC (W, W'))
   MUL1SC (buildPair (Wcarry, W)) -> ADD (W, Wcarry)

   MUL2 (W, W') -> MUL2XY (MUL (W, W'))
   MUL2XY (buildPair (W, W')) -> MUL2UL (W, W')
   MUL2UL (W, W') -> MUL2DEL (ADDC (W, W), W')
   MUL2DEL (buildPair (Wcarry, W), W') -> MUL2FL (ADD (W, ADD (Wcarry, Wcarry)), W')
   MUL2FL (W, W') -> MUL2SC (ADDC (W, W'))
   MUL2SC (buildPair (Wcarry, W)) -> ADD (W, ADD (Wcarry, Wcarry))

   MUL2A (W, W') -> MUL2AXY (MUL (W, W'))
   MUL2AXY (buildPair (W, W')) -> MUL2AUL (W, W')
   MUL2AUL (W, W') -> MUL2ADL (ADD (W, W), W')
   MUL2ADL (W, W') -> MUL2ASC (ADDC (W, W'))
   MUL2ASC (buildPair (Wcarry, W)) -> ADD (W, ADD (Wcarry, Wcarry))

# third set of MAA-specific cryptographic functions

   squareHalf (H) -> mulHalf (H, H)

   Q (O) -> squareHalf (addHalf (buildHalf (x00, O), x0001))

   J1_2 (W) -> MUL1 (W, W)
   J1_4 (W) -> MUL1 (J1_2 (W), J1_2 (W))
   J1_6 (W) -> MUL1 (J1_2 (W), J1_4 (W))
   J1_8 (W) -> MUL1 (J1_2 (W), J1_6 (W))
   J2_2 (W) -> MUL2 (W, W)
   J2_4 (W) -> MUL2 (J2_2 (W), J2_2 (W))
   J2_6 (W) -> MUL2 (J2_2 (W), J2_4 (W))
   J2_8 (W) -> MUL2 (J2_2 (W), J2_6 (W))

   K1_2 (W) -> MUL1 (W, W)
   K1_4 (W) -> MUL1 (K1_2 (W), K1_2 (W))
   K1_5 (W) -> MUL1 (W, K1_4 (W))
   K1_7 (W) -> MUL1 (K1_2 (W), K1_5 (W))
   K1_9 (W) -> MUL1 (K1_2 (W), K1_7 (W))
   K2_2 (W) -> MUL2 (W, W)
   K2_4 (W) -> MUL2 (K2_2 (W), K2_2 (W))
   K2_5 (W) -> MUL2 (W, K2_4 (W))
   K2_7 (W) -> MUL2 (K2_2 (W), K2_5 (W))
   K2_9 (W) -> MUL2 (K2_2 (W), K2_7 (W))

   H4 (W)    -> XOR (J1_4 (W), J2_4 (W))
   H6 (W)    -> XOR (J1_6 (W), J2_6 (W))
   H8 (W)    -> XOR (J1_8 (W), J2_8 (W))
   H0 (W)    -> XOR (K1_5 (W), K2_5 (W))
   H5 (W, O) -> MUL2 (H0 (W), Q (O))
   H7 (W)    -> XOR (K1_7 (W), K2_7 (W))
   H9 (W)    -> XOR (K1_9 (W), K2_9 (W))

   # ************************ SegmentedMessage ***********************

   splitSegment (unitMessage (W)) -> unitSegment (unitMessage (W))
   splitSegment (consMessage (W, M)) -> cutSegment (M, unitMessage (W), n254)

   cutSegment (unitMessage (W), M', N) -> unitSegment (reverseMessage (consMessage (W, M')))
   cutSegment (consMessage (W, M), M', n0) -> consSegment (reverseMessage (consMessage (W, M')), splitSegment (M))
   cutSegment (consMessage (W, M), M', succNat (N)) -> cutSegment (M, consMessage (W, M'), N)

   # ********* MAA algorithm  **********

   preludeXY (W1, W2) -> preludeXY' (BYT (W1, W2), PAT (W1, W2))
   preludeVW (W1, W2) -> preludeVW' (BYT (W1, W2))
   preludeST (W1, W2) -> preludeST' (BYT (W1, W2))

   preludeXY' (buildPair (W, W'), O) -> BYT (H4 (W), H5 (W', O))
   preludeVW' (buildPair (W, W'))    -> BYT (H6 (W), H7 (W'))
   preludeST' (buildPair (W, W'))    -> BYT (H8 (W), H9 (W'))

   computeXY (P, P', W) -> computeXY' (P, W, XOR' (computeVW (P')))

   computeXY' (buildPair (W1, W2), W, W') -> buildPair (MUL1 (XOR (W1, W), FIX1 (ADD (XOR (W2, W), W'))), MUL2A (XOR (W2, W), FIX2 (ADD (XOR (W1, W), W'))))

   computeVW (buildPair (W1, W2)) -> buildPair (CYC (W1), W2)

   loop1 (P, P', unitMessage (W)) -> computeXY (P, P', W)
   loop1 (P, P', consMessage (W, M)) -> loop1 (computeXY (P, P', W), computeVW (P'), M)	

   loop2 (P, P', unitMessage (W)) -> computeVW (P')
   loop2 (P, P', consMessage (W, M)) -> loop2 (computeXY (P, P', W), computeVW (P'), M)

   coda (P, P', buildPair (W, W')) -> XOR' (computeXY (computeXY (P, P', W), computeVW (P'), W'))

   MAA (buildKey (W1, W2), M) -> MAA' (preludeXY (W1, W2), preludeVW (W1, W2), preludeST (W1, W2), M)

   MAA' (P1, P2, P3, M) -> coda (loop1 (P1, P2, M), loop2 (P1, P2, M), P3)

   MAC (K, M) -> MACfirst (K, splitSegment (M))

   MACfirst (K, unitSegment (M)) -> MAA (K, M)
   MACfirst (K, consSegment (M, S)) -> MACnext (K, MAA (K, M), S)

   MACnext (K, W, unitSegment (M)) -> MAA (K, consMessage (W, M))
   MACnext (K, W, consSegment (M, S)) -> MACnext (K, MAA (K, consMessage (W, M)), S)

EVAL

# ----------------------------------------------------------------------------

   # test vectors for function MUL1 - cf. Table 1 of [Davies-Clayden-88]
   eqBlock (MUL1 (x0000000F, x0000000E), x000000D2)
   eqBlock (MUL1 (xFFFFFFF0, x0000000E), xFFFFFF2D)
   eqBlock (MUL1 (xFFFFFFF0, xFFFFFFF1), x000000D2)

   # test vectors for function MUL2 - cf. Table 1 of [Davies-Clayden-88]
   eqBlock (MUL2 (x0000000F, x0000000E), x000000D2)
   eqBlock (MUL2 (xFFFFFFF0, x0000000E), xFFFFFF3A)
   eqBlock (MUL2 (xFFFFFFF0, xFFFFFFF1), x000000B6)

   # test vectors for function MUL2A - cf. Table 1 of [Davies-Clayden-88]
   eqBlock (MUL2A (x0000000F, x0000000E), x000000D2)
   eqBlock (MUL2A (xFFFFFFF0, x0000000E), xFFFFFF3A)
   eqBlock (MUL2A (x7FFFFFF0, xFFFFFFF1), x800000C2)
   eqBlock (MUL2A (xFFFFFFF0, x7FFFFFF1), x000000C4)

   # test vectors for function BYT - cf. Table 2 of [Davies-Clayden-88]
   eqPair (BYT (x00000000, x00000000), buildPair (x0103070F, x1F3F7FFF))
   eqPair (BYT (xFFFF00FF, xFFFFFFFF), buildPair (xFEFC07F0, xE0C08000))
   eqPair (BYT (xAB00FFCD, xFFEF0001), buildPair (xAB01FCCD, xF2EF3501))

   # test vectors for function PAT - cf. Table 2 of [Davies-Clayden-88]
   eqOctet (PAT (x00000000, x00000000), xFF)
   eqOctet (PAT (xFFFF00FF, xFFFFFFFF), xFF)
   eqOctet (PAT (xAB00FFCD, xFFEF0001), x6A)

   # test vectors for functions J1_i - cf. Table 3 of [Davies-Clayden-88]
   eqBlock (J1_2 (x00000100), x00010000)
   eqBlock (J1_4 (x00000100), x00000001)
   eqBlock (J1_6 (x00000100), x00010000)
   eqBlock (J1_8 (x00000100), x00000001)

   # test vectors for functions J2_i - cf. Table 3 of [Davies-Clayden-88]
   eqBlock (J2_2 (x00000100), x00010000)
   eqBlock (J2_4 (x00000100), x00000002)
   eqBlock (J2_6 (x00000100), x00020000)
   eqBlock (J2_8 (x00000100), x00000004)

   # test vectors for functions Hi - cf. Table 3 of [Davies-Clayden-88]
   eqBlock (H4 (x00000100), x00000003)
   eqBlock (H6 (x00000100), x00030000)
   eqBlock (H8 (x00000100), x00000005)

   # test vectors for functions K1_i - cf. Table 3 of [Davies-Clayden-88]
   eqBlock (K1_2 (x00000080), x00004000)
   eqBlock (K1_4 (x00000080), x10000000)
   eqBlock (K1_5 (x00000080), x00000008)
   eqBlock (K1_7 (x00000080), x00020000)
   eqBlock (K1_9 (x00000080), x80000000)

   # test vectors for functions K2_i - cf. Table 3 of [Davies-Clayden-88]
   eqBlock (K2_2 (x00000080), x00004000)
   eqBlock (K2_4 (x00000080), x10000000)
   eqBlock (K2_5 (x00000080), x00000010)
   eqBlock (K2_7 (x00000080), x00040000)
   eqBlock (K2_9 (x00000080), x00000002)

   # test vectors for functions Hi - cf. Table 3 of [Davies-Clayden-88]
   eqBlock (H0 (x00000080), x00000018)
   eqBlock (Q (x01), x00000004)
   eqBlock (H5 (x00000080, x01), x00000060)
   eqBlock (H7 (x00000080), x00060000)
   eqBlock (H9 (x00000080), x80000002)

   # test vectors for function PAT - cf. Table 3 of [Davies-Clayden-88]
   eqOctet (PAT (x00000003, x00000060), xEE)
   eqOctet (PAT (x00030000, x00060000), xBB)
   eqOctet (PAT (x00000005, x80000002), xE6)

   # test vectors for function BYT - inferred from Table 3 of [Davies-Clayden-88]
   eqPair (BYT (x00000003, x00000060), buildPair (x01030703, x1D3B7760)) # BYT (H4, H5) = (X0, Y0)
   eqPair (BYT (x00030000, x00060000), buildPair (x0103050B, x17065DBB)) # BYT (H6, H7) = (V0, W)
   eqPair (BYT (x00000005, x80000002), buildPair (x01030705, x80397302)) # BYT (H8, H9) = (S, T)

# ----------------------------------------------------------------------------

   # test vectors for function MainLoop - cf. Table 4 of [Davies-Clayden-88]
# -- loop iteration described page 10 of [Davies-Clayden-88]

# test vectors for the first single-block message
   eqBlock (CYC (x00000003), x00000006)                # V
   eqBlock (XOR (x00000006, x00000003), x00000005)     # E
   eqBlock (XOR (x00000002, x00000005), x00000007)     # X
   eqBlock (XOR (x00000003, x00000005), x00000006)     # Y
   eqBlock (ADD (x00000005, x00000006), x0000000B)     # F
   eqBlock (ADD (x00000005, x00000007), x0000000C)     # G
   eqBlock (OR (x0000000B, x00000004), x0000000F)      # F
   eqBlock (OR (x0000000C, x00000001), x0000000D)      # G
   eqBlock (AND (x0000000F, xFFFFFFF7), x00000007)     # F
   eqBlock (AND (x0000000D, xFFFFFFFB), x00000009)     # G
   eqBlock (MUL1 (x00000007, x00000007), x00000031)    # X
   eqBlock (MUL2A (x00000006, x00000009), x00000036)   # Y
   eqBlock (XOR (x00000031, x00000036), x00000007)     # Z

# test vectors for the second single-block message
   eqBlock (CYC (x00000003), x00000006)                # V
   eqBlock (XOR (x00000006, x00000003), x00000005)     # E
   eqBlock (XOR (xFFFFFFFD, x00000001), xFFFFFFFC)     # X
   eqBlock (XOR (xFFFFFFFC, x00000001), xFFFFFFFD)     # Y
   eqBlock (ADD (x00000005, xFFFFFFFD), x00000002)     # F
   eqBlock (ADD (x00000005, xFFFFFFFC), x00000001)     # G
   eqBlock (OR (x00000002, x00000001), x00000003)      # F
   eqBlock (OR (x00000001, x00000004), x00000005)      # G
   eqBlock (AND (x00000003, xFFFFFFF9), x00000001)     # F
   eqBlock (AND (x00000005, xFFFFFFFC), x00000004)     # G
   eqBlock (MUL1 (xFFFFFFFC, x00000001), xFFFFFFFC)    # X
   eqBlock (MUL2A (xFFFFFFFD, x00000004), xFFFFFFFA)   # Y
   eqBlock (XOR (xFFFFFFFC, xFFFFFFFA), x00000006)     # Z

# test vectors for the third single-block message
   eqBlock (CYC (x00000007), x0000000E)                # V
   eqBlock (XOR (x0000000E, x00000007), x00000009)     # E
   eqBlock (XOR (xFFFFFFFD, x00000008), xFFFFFFF5)     # X
   eqBlock (XOR (xFFFFFFFC, x00000008), xFFFFFFF4)     # Y
   eqBlock (ADD (x00000009, xFFFFFFF4), xFFFFFFFD)     # F
   eqBlock (ADD (x00000009, xFFFFFFF5), xFFFFFFFE)     # G
   eqBlock (OR (xFFFFFFFD, x00000001), xFFFFFFFD)      # F
   eqBlock (OR (xFFFFFFFE, x00000002), xFFFFFFFE)      # G
   eqBlock (AND (xFFFFFFFD, xFFFFFFFE), xFFFFFFFC)     # F
   eqBlock (AND (xFFFFFFFE, x7FFFFFFD), x7FFFFFFC)     # G
   eqBlock (MUL1 (xFFFFFFF5, xFFFFFFFC), x0000001E)    # X
   eqBlock (MUL2A (xFFFFFFF4, x7FFFFFFC), x0000001E)   # Y
   eqBlock (XOR (x0000001E, x0000001E), x00000000)     # Z

# test vectors for the three-block message: first block
   eqBlock (CYC (x00000001), x00000002)                # V
   eqBlock (XOR (x00000002, x00000001), x00000003)     # E
   eqBlock (XOR (x00000001, x00000000), x00000001)     # X
   eqBlock (XOR (x00000002, x00000000), x00000002)     # Y
   eqBlock (ADD (x00000003, x00000002), x00000005)     # F
   eqBlock (ADD (x00000003, x00000001), x00000004)     # G
   eqBlock (OR (x00000005, x00000002), x00000007)      # F
   eqBlock (OR (x00000004, x00000001), x00000005)      # G
   eqBlock (AND (x00000007, xFFFFFFFB), x00000003)     # F
   eqBlock (AND (x00000005, xFFFFFFFB), x00000001)     # G
   eqBlock (MUL1 (x00000001, x00000003), x00000003)    # X
   eqBlock (MUL2A (x00000002, x00000001), x00000002)   # Y
   eqBlock (XOR (x00000003, x00000002), x00000001)     # Z

# test vectors for the three-block message: second block
   eqBlock (CYC (x00000002), x00000004)                # V
   eqBlock (XOR (x00000004, x00000001), x00000005)     # E
   eqBlock (XOR (x00000003, x00000001), x00000002)     # X
   eqBlock (XOR (x00000002, x00000001), x00000003)     # Y
   eqBlock (ADD (x00000005, x00000003), x00000008)     # F
   eqBlock (ADD (x00000005, x00000002), x00000007)     # G
   eqBlock (OR (x00000008, x00000002), x0000000A)      # F
   eqBlock (OR (x00000007, x00000001), x00000007)      # G
   eqBlock (AND (x0000000A, xFFFFFFFB), x0000000A)     # F
   eqBlock (AND (x00000007, xFFFFFFFB), x00000003)     # G
   eqBlock (MUL1 (x00000002, x0000000A), x00000014)    # X
   eqBlock (MUL2A (x00000003, x00000003), x00000009)   # Y
   eqBlock (XOR (x00000014, x00000009), x0000001D)     # Z

# test vectors for the three-block message: third block
   eqBlock (CYC (x00000004), x00000008)                # V
   eqBlock (XOR (x00000008, x00000001), x00000009)     # E
   eqBlock (XOR (x00000014, x00000002), x00000016)     # X
   eqBlock (XOR (x00000009, x00000002), x0000000B)     # Y
   eqBlock (ADD (x00000009, x0000000B), x00000014)     # F
   eqBlock (ADD (x00000009, x00000016), x0000001F)     # G
   eqBlock (OR (x00000014, x00000002), x00000016)      # F
   eqBlock (OR (x0000001F, x00000001), x0000001F)      # G
   eqBlock (AND (x00000016, xFFFFFFFB), x00000012)     # F
   eqBlock (AND (x0000001F, xFFFFFFFB), x0000001B)     # G
   eqBlock (MUL1 (x00000016, x00000012), x0000018C)    # X
   eqBlock (MUL2A (x0000000B, x0000001B), x00000129)   # Y
   eqBlock (XOR (x0000018C, x00000129), x000000A5)     # Z

# test of Annex E.3.3 of [ISO 8730:1990]
# test vectors for block x0A202020 with key (J = xE6A12F07, K = x9D15C437)

   eqBlock (CYC (xC4EB1AEB), x89D635D7)                # V
   eqBlock (XOR (x89D635D7, xF6A09667), x7F76A3B0)     # E
   eqBlock (XOR (x21D869BA, x0A202020), x2BF8499A)     # X
   eqBlock (XOR (x7792F9D4, x0A202020), x7DB2D9F4)     # Y
   eqBlock (ADD (x7F76A3B0, x7DB2D9F4), xFD297DA4)     # F
   eqBlock (ADD (x7F76A3B0, x2BF8499A), xAB6EED4A)     # G
   eqBlock (OR (xFD297DA4, x02040801), xFF2D7DA5)      # F
   eqBlock (OR (xAB6EED4A, x00804021), xABEEED6B)      # G
   eqBlock (AND (xFF2D7DA5, xBFEF7FDF), xBF2D7D85)     # F
   eqBlock (AND (xABEEED6B, x7DFEFBFF), x29EEE96B)     # G
   eqBlock (MUL1 (x2BF8499A, xBF2D7D85), x0AD67E20)    # X
   eqBlock (MUL2A (x7DB2D9F4, x29EEE96B), x30261492)   # Y

# ----------------------------------------------------------------------------

   # test vectors for the whole algorithm - cf. Table 5 of [Davies-Clayden-88]

# test vectors of the first column of Table 5
#  key (J = x00FF00FF, K = x00000000), message (M1 = x55555555, M2 = xAAAAAAAA)

   eqOctet (PAT (x00FF00FF, x00000000), xFF)  # P

#  -- preludeXY (J, K) computes X0 and Y0
   eqPair (preludeXY (x00FF00FF, x00000000), buildPair (x4A645A01, x50DEC930))
#  -- preludeVW (J, K) computes V0 and W
   eqPair (preludeVW (x00FF00FF, x00000000), buildPair (x5CCA3239, xFECCAA6E))
#  -- preludeST (J, K) computes S and T
   eqPair (preludeST (x00FF00FF, x00000000), buildPair (x51EDE9C7, x24B66FB5))

#  -- first MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x4A645A01, x50DEC930), x55555555, XOR (nCYC (n1, x5CCA3239), xFECCAA6E)), buildPair (x48B204D6, x5834A585))
#  -- second MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x48B204D6, x5834A585), xAAAAAAAA, XOR (nCYC (n2, x5CCA3239), xFECCAA6E)), buildPair (x4F998E01, xBE9F0917))
#  -- coda: MainLoop iteration with S, to compute X and Y
   eqPair (computeXY' (buildPair (x4F998E01, xBE9F0917), x51EDE9C7, XOR (nCYC (n3, x5CCA3239), xFECCAA6E)), buildPair (x344925FC, xDB9102B0))
#  -- coda: MainLoop iteration with T, to compute X and Y
   eqPair (computeXY' (buildPair (x344925FC, xDB9102B0), x24B66FB5, XOR (nCYC (n4, x5CCA3239), xFECCAA6E)), buildPair (x277B4B25, xD636250D))

   eqBlock (XOR (x277B4B25, xD636250D), xF14D6E28)  # Z

# test vectors of the second column of Table 5
#  key (J = x00FF00FF, K = x00000000), message (M1 = xAAAAAAAA, M2 = x55555555)

   eqOctet (PAT (x00FF00FF, x00000000), xFF)  # P

#  -- preludeXY (J, K) computes X0 and Y0
   eqPair (preludeXY (x00FF00FF, x00000000), buildPair (x4A645A01, x50DEC930))
#  -- preludeVW (J, K) computes V0 and W
   eqPair (preludeVW (x00FF00FF, x00000000), buildPair (x5CCA3239, xFECCAA6E))
#  -- preludeST (J, K) computes S and T
   eqPair (preludeST (x00FF00FF, x00000000), buildPair (x51EDE9C7, x24B66FB5))

#  -- first MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x4A645A01, x50DEC930), xAAAAAAAA, XOR (nCYC (n1, x5CCA3239), xFECCAA6E)), buildPair (x6AEBACF8, x9DB15CF6))
#  -- second MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x6AEBACF8, x9DB15CF6), x55555555, XOR (nCYC (n2, x5CCA3239), xFECCAA6E)), buildPair (x270EEDAF, xB8142629))
#  -- coda: MainLoop iteration with S, to compute X and Y
   eqPair (computeXY' (buildPair (x270EEDAF, xB8142629), x51EDE9C7, XOR (nCYC (n3, x5CCA3239), xFECCAA6E)), buildPair (x29907CD8, xBA92DB12))
#  -- coda: MainLoop iteration with T, to compute X and Y
   eqPair (computeXY' (buildPair (x29907CD8, xBA92DB12), x24B66FB5, XOR (nCYC (n4, x5CCA3239), xFECCAA6E)), buildPair (x28EAD8B3, x81D10CA3))

   eqBlock (XOR (x28EAD8B3, x81D10CA3), xA93BD410)  # Z

# test vectors of the third column of Table 5
# key (J = x55555555, K = x5A35D667), message (M1 = x00000000, M2 = xFFFFFFFF)

   eqOctet (PAT (x55555555, x5A35D667), x00)  # P

#  -- preludeXY (J, K) computes X0 and Y0
   eqPair (preludeXY (x55555555, x5A35D667), buildPair (x34ACF886, x7397C9AE))
#  -- preludeVW (J, K) computes V0 and W
   eqPair (preludeVW (x55555555, x5A35D667), buildPair (x7201F4DC, x2829040B))
#  -- preludeST (J, K) computes S and T
   eqPair (preludeST (x55555555, x5A35D667), buildPair (x9E2E7B36, x13647149))

#  -- first MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x34ACF886, x7397C9AE), x00000000, XOR (nCYC (n1, x7201F4DC), x2829040B)), buildPair (x2FD76FFB, x550D91CE))
#  -- second MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x2FD76FFB, x550D91CE), xFFFFFFFF, XOR (nCYC (n2, x7201F4DC), x2829040B)), buildPair (xA70FC148, x1D10D8D3))
#  -- coda: MainLoop iteration with S, to compute X and Y
   eqPair (computeXY' (buildPair (xA70FC148, x1D10D8D3), x9E2E7B36, XOR (nCYC (n3, x7201F4DC), x2829040B)), buildPair (xB1CC1CC5, x29C1485F))
#  -- coda: MainLoop iteration with T, to compute X and Y
   eqPair (computeXY' (buildPair (xB1CC1CC5, x29C1485F), x13647149, XOR (nCYC (n4, x7201F4DC), x2829040B)), buildPair (x288FC786, x9115A558))

   eqBlock (XOR (x288FC786, x9115A558), xB99A62DE)  # Z

# test vectors of the fourth column of Table 5
# key (J = x55555555, K = x5A35D667), message (M1 = xFFFFFFFF, M2 = x00000000)

   eqOctet (PAT (x55555555, x5A35D667), x00)  # P

#  -- preludeXY (J, K) computes X0 and Y0
   eqPair (preludeXY (x55555555, x5A35D667), buildPair (x34ACF886, x7397C9AE))
#  -- preludeVW (J, K) computes V0 and W
   eqPair (preludeVW (x55555555, x5A35D667), buildPair (x7201F4DC, x2829040B))
#  -- preludeST (J, K) computes S and T
   eqPair (preludeST (x55555555, x5A35D667), buildPair (x9E2E7B36, x13647149))

#  -- first MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x34ACF886, x7397C9AE), xFFFFFFFF, XOR (nCYC (n1, x7201F4DC), x2829040B)), buildPair (x8DC8BBDE, xFE4E5BDD))
#  -- second MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x8DC8BBDE, xFE4E5BDD), x00000000, XOR (nCYC (n2, x7201F4DC), x2829040B)), buildPair (xCBC865BA, x0297AF6F))
#  -- coda: MainLoop iteration with S, to compute X and Y
   eqPair (computeXY' (buildPair (xCBC865BA, x0297AF6F), x9E2E7B36, XOR (nCYC (n3, x7201F4DC), x2829040B)), buildPair (x3CF3A7D2, x160EE9B5))
#  -- coda: MainLoop iteration with T, to compute X and Y
   eqPair (computeXY' (buildPair (x3CF3A7D2, x160EE9B5), x13647149, XOR (nCYC (n4, x7201F4DC), x2829040B)), buildPair (xD0482465, x7050EC5E))

   eqBlock (XOR (xD0482465, x7050EC5E), xA018C83B)  # Z

# tests of Annex E.3.3 of [ISO 8730:1990]
# key (J = xE6A12F07, K = x9D15C437)

#  -- preludeXY (J, K) computes X0 and Y0
   eqPair (preludeXY (xE6A12F07, x9D15C437), buildPair (x21D869BA, x7792F9D4))
#  -- preludeVW (J, K) computes V0 and W
   eqPair (preludeVW (xE6A12F07, x9D15C437), buildPair (xC4EB1AEB, xF6A09667))
#  -- preludeST (J, K) computes S and T
   eqPair (preludeST (xE6A12F07, x9D15C437), buildPair (x6D67E884, xA511987A))

# ----------------------------------------------------------------------------

# test vectors for the whole algorithm - cf. Table 6 of [Davies-Clayden-88]

# -- test vectors of Table 6

#  -- 1st MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x204E80A7, x077788A2), x00000000, XOR (nCYC (n1, x17A808FD), xFEA1D334)), buildPair (x303FF4AA, x1277A6D4))
#  -- 2nd MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x303FF4AA, x1277A6D4), x00000000, XOR (nCYC (n2, x17A808FD), xFEA1D334)), buildPair (x55DD063F, x4C49AAE0))
#  -- 3rd MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x55DD063F, x4C49AAE0), x00000000, XOR (nCYC (n3, x17A808FD), xFEA1D334)), buildPair (x51AF3C1D, x5BC02502))
#  -- 4th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x51AF3C1D, x5BC02502), x00000000, XOR (nCYC (n4, x17A808FD), xFEA1D334)), buildPair (xA44AAAC0, x63C70DBA))
#  -- 5th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (xA44AAAC0, x63C70DBA), x00000000, XOR (nCYC (n5, x17A808FD), xFEA1D334)), buildPair (x4D53901A, x2E80AC30))
#  -- 6th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x4D53901A, x2E80AC30), x00000000, XOR (nCYC (n6, x17A808FD), xFEA1D334)), buildPair (x5F38EEF1, x2A6091AE))
#  -- 7th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x5F38EEF1, x2A6091AE), x00000000, XOR (nCYC (n7, x17A808FD), xFEA1D334)), buildPair (xF0239DD5, x3DD81AC6))
#  -- 8th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (xF0239DD5, x3DD81AC6), x00000000, XOR (nCYC (n8, x17A808FD), xFEA1D334)), buildPair (xEB35B97F, x9372CDC6))
#  -- 9th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (xEB35B97F, x9372CDC6), x00000000, XOR (nCYC (n9, x17A808FD), xFEA1D334)), buildPair (x4DA124A1, xC6B1317E))
#  -- 10th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x4DA124A1, xC6B1317E), x00000000, XOR (nCYC (n10, x17A808FD), xFEA1D334)), buildPair (x7F839576, x74B39176))
#  -- 11th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x7F839576, x74B39176), x00000000, XOR (nCYC (n11, x17A808FD), xFEA1D334)), buildPair (x11A9D254, xD78634BC))
#  -- 12th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x11A9D254, xD78634BC), x00000000, XOR (nCYC (n12, x17A808FD), xFEA1D334)), buildPair (xD8804CA5, xFDC1A8BA))
#  -- 13th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (xD8804CA5, xFDC1A8BA), x00000000, XOR (nCYC (n13, x17A808FD), xFEA1D334)), buildPair (x3F6F7248, x11AC46B8))
#  -- 14th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x3F6F7248, x11AC46B8), x00000000, XOR (nCYC (n14, x17A808FD), xFEA1D334)), buildPair (xACBC13DD, x33D5A466))
#  -- 15th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (xACBC13DD, x33D5A466), x00000000, XOR (nCYC (n15, x17A808FD), xFEA1D334)), buildPair (x4CE933E1, xC21A1846))
#  -- 16th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x4CE933E1, xC21A1846), x00000000, XOR (nCYC (n16, x17A808FD), xFEA1D334)), buildPair (xC1ED90DD, xCD959B46))
#  -- 17th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (xC1ED90DD, xCD959B46), x00000000, XOR (nCYC (n17, x17A808FD), xFEA1D334)), buildPair (x3CD54DEB, x613F8E2A))
#  -- 18th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (x3CD54DEB, x613F8E2A), x00000000, XOR (nCYC (n18, x17A808FD), xFEA1D334)), buildPair (xBBA57835, x07C72EAA))
#  -- 19th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (xBBA57835, x07C72EAA), x00000000, XOR (nCYC (n19, x17A808FD), xFEA1D334)), buildPair (xD7843FDC, x6AD6E8A4))
#  -- 20th MainLoop iteration to compute X and Y
   eqPair (computeXY' (buildPair (xD7843FDC, x6AD6E8A4), x00000000, XOR (nCYC (n20, x17A808FD), xFEA1D334)), buildPair (x5EBA06C2, x91896CFA))
#  -- coda: MainLoop iteration with S, to compute X and Y
   eqPair (computeXY' (buildPair (x5EBA06C2, x91896CFA), x76232E5F, XOR (nCYC (n21, x17A808FD), xFEA1D334)), buildPair (x1D9C9655, x98D1CC75))
#  -- coda: MainLoop iteration with T, to compute X and Y
   eqPair (computeXY' (buildPair (x1D9C9655, x98D1CC75), x4FB1138A, XOR (nCYC (n22, x17A808FD), xFEA1D334)), buildPair (x7BC180AB, xA0B87B77))

   eqBlock (MAC (buildKey (x80018001, x80018000), makeMessage (n20, x00000000, x00000000)), xDB79FBDC)

# -- further tests added by CONVECS

   eqBlock (MAC (buildKey (x80018001, x80018000), makeMessage (n16, x00000000, x07050301)), x8CE37709)

   eqBlock (MAC (buildKey (x80018001, x80018000), makeMessage (n256, x00000000, x07050301)), x717153D5)

   eqBlock (MAC (buildKey (x80018001, x80018000), makeMessage (n4100, x00000000, x07050301)), x7783C51D)

END-SPEC
