REC-SPEC Fib32
SORTS
  Bool Pos Int Nat
CONS
  T : -> Bool
  F : -> Bool
  d1 : -> Pos
  cDub : Bool Pos -> Pos
  cInt : Nat -> Int
  cNeg : Pos -> Int
  d0 : -> Nat
  cNat : Pos -> Nat
OPNS
  not : Bool -> Bool
  eqPos : Pos Pos -> Bool
  lePos : Pos Pos -> Bool
  ltPos : Pos Pos -> Bool
  s : Pos -> Pos
  addc : Bool Pos Pos -> Pos
  Int2Nat : Int -> Nat
  minus : Nat -> Int
  minus2 : Nat Nat -> Int
  eq : Nat Nat -> Bool
  Pos2Nat : Pos -> Nat
  Nat2Pos : Nat -> Pos
  le : Nat Nat -> Bool
  lt : Nat Nat -> Bool
  ge : Nat Nat -> Bool
  gt : Nat Nat -> Bool
  pre : Pos -> Nat
  dub : Bool Nat -> Nat
  plus : Nat Nat -> Nat
  gtesubtPos : Pos Pos -> Nat
  gtesubt : Nat Nat -> Nat
  gtesubtb : Bool Pos Pos -> Nat
  fib : Nat -> Nat
  eqBool : Bool Bool -> Bool
  and : Bool Bool -> Bool
  # ifthenelse : Bool Int Int -> Int # removed by H. Garavel (no lazy evaluation)
VARS
  m n : Nat
  b c d : Bool
  x y : Int
  p q : Pos
RULES
  eqBool(T,b) -> b
  # eqBool(b,T) -> b #---- this equation created ambiguity for eqBool(T,T); it was replaced by the next equation
  eqBool(F,T) -> F
  eqBool(F,F) -> T

  and(T,b) -> b
  and(F,b) -> F
  # and(b,T) -> b    #---- redundant with previous equations
  # and(b,F) -> F    #---- redundant with previous equations

  # ifthenelse(T,x,y) -> x    #---- removed (no lazy evaluation)
  # ifthenelse(F,x,y) -> y    #---- removed (no lazy evaluation)
  # ifthenelse(b,x,x) -> x    #---- redundant with previous equations

  not(T) -> F
  not(F) -> T
  # not(not(b))  =  b

  eqPos(d1,d1) -> T
  eqPos(d1,cDub(b,p)) -> F
  eqPos(cDub(b,p),d1) -> F
  eqPos(cDub(b,p),cDub(c,q)) -> and (eqBool(b,c),eqPos(p,q))
  # eqPos(cDub(F,p),cDub(T,q)) -> F  #---- implied by the previous rule
  # eqPos(cDub(T,p),cDub(F,q)) -> F  #---- implied also
  # eqPos(p,p) -> T   #---- redundant

  lePos(d1,p) -> T
  lePos(cDub(b,p),d1) -> F
  lePos(cDub(b,p),cDub(c,q)) -> lePos(p,q)   if b = c
  lePos(cDub(b,p),cDub(c,q)) -> lePos(p,q)   if b <> c and-if b = F
  lePos(cDub(b,p),cDub(c,q)) -> ltPos(p,q)   if b <> c and-if b = T
  # lePos(cDub(b,p),cDub(b,q)) -> lePos(p,q) #---- non-linear
  # lePos(cDub(F,p),cDub(T,q)) -> lePos(p,q) #---- redundant
  # lePos(cDub(T,p),cDub(F,q)) -> ltPos(p,q) #---- redundant


  ltPos(p,d1) -> F
  ltPos(d1,cDub(b,p)) -> T
  ltPos(cDub(b,p),cDub(c,q)) -> ltPos(p,q)   if b = c
  ltPos(cDub(b,p),cDub(c,q)) -> lePos(p,q)   if b <> c and-if b = F
  ltPos(cDub(b,p),cDub(c,q)) -> ltPos(p,q)   if b <> c and-if b = T
  # ltPos(cDub(b,p),cDub(b,q)) -> ltPos(p,q) #---- non-linear
  # ltPos(cDub(F,p),cDub(T,q)) -> lePos(p,q) #---- redundant
  # ltPos(cDub(T,p),cDub(F,q)) -> ltPos(p,q) #---- redundant

  s(d1) -> cDub(F,d1)
  s(cDub(F,p)) -> cDub(T,p)
  s(cDub(T,p)) -> cDub(F,s(p))

  addc(F,d1,p) -> s(p)
  addc(T,d1,p) -> s(s(p))
  addc(F,p,d1) -> s(p)
  addc(T,p,d1) -> s(s(p))
  addc(b,cDub(c,p),cDub(d,q)) -> cDub(b,addc(c,p,q))  if c = d
  addc(b,cDub(c,p),cDub(d,q)) -> cDub(not(b),addc(c,p,q))  if c <> d
  # addc(b,cDub(c,p),cDub(c,q)) -> cDub(b,addc(c,p,q))   #---- non-linear
  # addc(b,cDub(F,p),cDub(T,q)) -> cDub(not(b),addc(b,p,q))  #---- redundant
  # addc(b,cDub(T,p),cDub(F,q)) -> cDub(not(b),addc(b,p,q))  #---- redundant

  Int2Nat(cInt(n)) -> n

  minus(d0) -> cInt(d0)
  minus(cNat(p)) -> cNeg(p)

  # original rule relying on lazy evaluation, replaced with conditional rules
  # minus2(m,n) -> ifthenelse(ge(m,n),cInt(gtesubt(m,n)),minus(gtesubt(n,m)))
  minus2(m,n) -> cInt(gtesubt(m,n)) if ge(m,n) = T
  minus2(m,n) -> minus(gtesubt(n,m)) if ge(m,n) = F

  Pos2Nat(p) -> cNat(p)

  Nat2Pos(cNat(p)) -> p

  eq(d0,d0) -> T
  eq(d0,cNat(p)) -> F
  eq(cNat(p),d0) -> F
  eq(cNat(p),cNat(q)) -> eqPos(p,q)
  # eq(n,n) -> T    #---- redundant with previous equations

  le(d0,n) -> T
  le(cNat(p),d0) -> F
  le(cNat(p),cNat(q)) -> lePos(p,q)

  lt(n,d0) -> F
  lt(d0,cNat(p)) -> T
  lt(cNat(p),cNat(q)) -> ltPos(p,q)

  ge(m,n) -> le(n,m)
  gt(m,n) -> lt(n,m)

  pre(d1) -> d0
  pre(cDub(T,p)) -> cNat(cDub(F,p))
  pre(cDub(F,p)) -> dub(T,pre(p))

  dub(F,d0) -> d0
  dub(T,d0) -> cNat(d1)
  dub(b,cNat(p)) -> cNat(cDub(b,p))

  plus(d0,n) -> n
  plus(n,d0) -> n
  plus(cNat(p),cNat(q)) -> cNat(addc(F,p,q))

  gtesubtPos(p,q) -> gtesubtb(F,p,q)
  gtesubt(n,d0) -> n
  gtesubt(cNat(p),cNat(q)) -> gtesubtPos(p,q)

  gtesubtb(F,p,d1) -> pre(p)
  gtesubtb(T,p,d1) -> pre(Nat2Pos(pre(p)))
  gtesubtb(b,cDub(c,p),cDub(d,q)) -> dub(b,gtesubtb(b,p,q))  if c = d
  gtesubtb(b,cDub(c,p),cDub(d,q)) -> dub(not(b),gtesubtb(T,p,q)) if c <> d and-if c = F
  # gtesubtb(b,cDub(c,p),cDub(c,q)) -> dub(b,gtesubtb(b,p,q))  #---- non-linear
  gtesubtb(b,cDub(c,p),cDub(d,q)) -> dub(not(b),gtesubtb(d,p,q)) if c <> d and-if c = T
  # gtesubtb(b,cDub(F,p),cDub(T,q)) -> dub(not(b),gtesubtb(T,p,q)) #---- now redundant
  # gtesubtb(b,cDub(T,p),cDub(F,q)) -> dub(not(b),gtesubtb(F,p,q)) #---- now redundant

  fib(d0) -> d0
  fib(cNat(d1)) -> cNat(d1)
  fib(cNat(cDub(b,p))) -> plus(fib(Int2Nat(minus2(cNat(cDub(b,p)),Pos2Nat(d1)))),fib(Int2Nat(minus2(cNat(cDub(b,p)),Pos2Nat(cDub(F,d1))))))
EVAL

   fib(Pos2Nat(cDub(F,cDub(F,cDub(F,cDub(F,cDub(F,d1)))))))

END-SPEC
