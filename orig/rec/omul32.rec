REC-SPEC OMUL32 : Bool Bit Octet OctetSum Half HalfSum Block BlockSum Pair

# 32x32 binary multiplier as a term-rewrite system - Hubert Garavel 2016, 2019
# this is an alternative, more complex version of mul32.rec

SORTS

CONS

OPNS

   omulBlock : Block Block -> Pair
   # the 1st part of the resulting Pair is the highMul
   # the 2nd part of the resulting Pair is the lowMul

   omulBlock0 : Half Half Half Half Half Half Half Half Half Half Half Half Half Half Half Half -> Pair

   omulBlock8 : Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet -> Pair

   omulBlock7 : Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Half Octet -> Pair

   omulBlock6 : Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Half Octet Octet -> Pair

   omulBlock5 : Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Octet Half Octet Octet Octet -> Pair

   omulBlock4 : Octet Octet Octet Octet Octet Octet Octet Octet Octet Half Octet Octet Octet Octet -> Pair

   omulBlock3 : Octet Octet Octet Octet Half Octet Octet Octet Octet Octet -> Pair

   omulBlock2 : Octet Half Octet Octet Octet Octet Octet Octet -> Pair

   omulBlock1 : Half Octet Octet Octet Octet Octet Octet Octet -> Pair

   testMulBlock : Block Block Block Block -> Bool

VARS

   O1 O2 O3 O4 O5 O6 O7 O8 O'1 O'2 O'3 O'4 Ocarry : Octet

   O11high O11low O12high O12low O13high O13low O14high O14low O21high O21low O22high O22low O23high O23low O24high O24low O31high O31low O32high O32low O33high O33low O34high O34low O41high O41low O42high O42low O43high O43low O44high O44low : Octet

   W W' W1 W2 : Block

RULES

   omulBlock (buildBlock (O1, O2, O3, O4), buildBlock (O'1, O'2, O'3, O'4)) -> omulBlock0 (mulOctet (O1, O'1), mulOctet (O1, O'2), mulOctet (O1, O'3), mulOctet (O1, O'4), mulOctet (O2, O'1), mulOctet (O2, O'2), mulOctet (O2, O'3), mulOctet (O2, O'4), mulOctet (O3, O'1), mulOctet (O3, O'2), mulOctet (O3, O'3), mulOctet (O3, O'4), mulOctet (O4, O'1), mulOctet (O4, O'2), mulOctet (O4, O'3), mulOctet (O4, O'4))

omulBlock0 (buildHalf (O11high, O11low), buildHalf (O12high, O12low), buildHalf (O13high, O13low), buildHalf (O14high, O14low), buildHalf (O21high, O21low), buildHalf (O22high, O22low), buildHalf (O23high, O23low), buildHalf (O24high, O24low), buildHalf (O31high, O31low), buildHalf (O32high, O32low), buildHalf (O33high, O33low), buildHalf (O34high, O34low), buildHalf (O41high, O41low), buildHalf (O42high, O42low), buildHalf (O43high, O43low), buildHalf (O44high, O44low)) -> omulBlock8 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O34low, O41high, O41low, O42high, O42low, O43high, O43low, O44high; O44low)

omulBlock8 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O34low, O41high, O41low, O42high, O42low, O43high, O43low, O44high; O8) -> omulBlock7 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O41high, O41low, O42high, O42low, O43high; addHalfOctet (O44high, addHalfOctets (O34low, O43low)); O8)

omulBlock7 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O41high, O41low, O42high, O42low, O43high; buildHalf (Ocarry, O7); O8) -> omulBlock6 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O31high, O31low, O32high, O32low, O33high, O41high, O41low, O42high; addHalfOctet (Ocarry, addHalfOctet (O34high, addHalfOctet (O43high, addHalfOctet (O24low, addHalfOctets (O33low, O42low))))); O7, O8)

omulBlock6 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O31high, O31low, O32high, O32low, O33high, O41high, O41low, O42high; buildHalf (Ocarry, O6); O7, O8) -> omulBlock5 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O21high, O21low, O22high, O22low, O23high, O31high, O31low, O32high, O41high; addHalfOctet (Ocarry, addHalfOctet (O24high, addHalfOctet (O33high, addHalfOctet (O42high, addHalfOctet (O14low, addHalfOctet (O23low, addHalfOctets (O32low, O41low))))))); O6, O7, O8)

omulBlock5 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O21high, O21low, O22high, O22low, O23high, O31high, O31low, O32high, O41high; buildHalf (Ocarry, O5); O6, O7, O8) -> omulBlock4 (O11high, O11low, O12high, O12low, O13high, O21high, O21low, O22high, O31high; addHalfOctet (Ocarry, addHalfOctet (O14high, addHalfOctet (O23high, addHalfOctet (O32high, addHalfOctet (O41high, addHalfOctet (O13low, addHalfOctets (O22low, O31low))))))); O5, O6, O7, O8)

omulBlock4 (O11high, O11low, O12high, O12low, O13high, O21high, O21low, O22high, O31high; buildHalf (Ocarry, O4); O5, O6, O7, O8) -> omulBlock3 (O11high, O11low, O12high, O21high; addHalfOctet (Ocarry, addHalfOctet (O13high, addHalfOctet (O22high, addHalfOctet (O31high, addHalfOctets (O12low, O21low))))); O4, O5, O6, O7, O8)

omulBlock3 (O11high, O11low, O12high, O21high; buildHalf (Ocarry, O3); O4, O5, O6, O7, O8) -> omulBlock2 (O11high; addHalfOctet (Ocarry, addHalfOctet (O12high, addHalfOctets (O21high, O11low))); O3, O4, O5, O6, O7, O8)

omulBlock2 (O11high; buildHalf (Ocarry, O2); O3, O4, O5, O6, O7, O8) -> omulBlock1 (addHalfOctets (Ocarry, O11high); O2, O3, O4, O5, O6, O7, O8)

omulBlock1 (buildHalf (Ocarry, O1); O2, O3, O4, O5, O6, O7, O8) -> buildPair (buildBlock (O1, O2, O3, O4), buildBlock (O5, O6, O7, O8))
# assert eqOctet (Ocarry, x00)

   testMulBlock (W, W', W1, W2) -> andBool (eqPair (omulBlock (W, W'), buildPair (W1, W2)), eqPair (omulBlock (W', W), buildPair (W1, W2)))
# check that (W * W') = (W' * W) = (W1, W2)

EVAL

# a few manually-written unit tests

   testMulBlock (buildBlock (xCC, xFF, x38, x6B), buildBlock (xAB, xC0, x54, x02), buildBlock (x89, x88, x7D, x5F), buildBlock (x21, xC1, x8C, xD6))

# a bunch of automatically-generated unit tests
# (the expected output is a list of Booleans equal to true)

META

function PRINT_OCTET(N) {
	printf "x%02X", N
}

function PRINT_BLOCK(N) {
	print "buildBlock ("
	PRINT_OCTET(int (N / 16777216))
	print ", "
	PRINT_OCTET(int ((N / 65536) % 256))
	print ", "
	PRINT_OCTET(int ((N / 256) % 256))
	print ", "
	PRINT_OCTET(N % 256)
	print ")"
}

ORS = ""
MAX = 4294967296 # 2^32
# for all I in 0...MAX-1 such that I is a multiple of 50266112
for (I = 0 ; I < MAX; I += 50266112) {
	# for all J in 0...MAX-1 such that J is a multiple of 83820541
	for (J = 0 ; J < MAX; J += 83820541) {
		PROD = (I * J) # expected result
		# check predicate testMulBlock (I, J, H, L) where PROD = (H, L)
		print "testMulBlock ("
		PRINT_BLOCK(I)
		print ", "
		PRINT_BLOCK(J)
		print ", "
		PRINT_BLOCK(int (PROD / MAX))
		print ", "
		PRINT_BLOCK(PROD % MAX)
		print ")"
		print "\n"
	}
}
END-META

END-SPEC
