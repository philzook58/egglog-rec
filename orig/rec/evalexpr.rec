REC-SPEC EvalExpr
SORTS
  Bool Pos ENat SNat
CONS
  true : -> Bool
  false : -> Bool
  d1 : -> Pos
  cDub : Bool Pos -> Pos
  Exz : -> ENat
  Exs : ENat -> ENat
  Explus : ENat ENat -> ENat
  Exmult : ENat ENat -> ENat
  Exexp : ENat ENat -> ENat
  Z : -> SNat
  S : SNat -> SNat
OPNS
  eqBool : Bool Bool -> Bool
  and : Bool Bool -> Bool
  eqPos : Pos Pos -> Bool
  lambda0 : ENat -> Bool
  eqENat : ENat ENat -> Bool
  # ifthenelseENat : Bool ENat ENat -> ENat # removed by CONVEC (no lazy)
  eq : SNat SNat -> Bool
  # ifthenelse : Bool SNat SNat -> SNat # removed by CONVEC (no lazy)
  succ17 : SNat -> SNat
  plus17 : SNat SNat -> SNat
  mult17 : SNat SNat -> SNat
  exp17 : SNat SNat -> SNat
  eval17 : ENat -> SNat
  evalexp17 : ENat -> SNat
  expand : ENat -> ENat
  two : -> ENat
  seventeen : -> ENat
  f : ENat -> Bool
VARS
  b c : Bool
  p q : Pos
  l m n o : ENat
  r t : SNat
RULES
  eqBool(true,b) -> b
  # eqBool(b,true) -> b #---- this equation created ambiguity for eqBool(true,true); it was replaced by the previous equation
  eqBool(false,true) -> false
  eqBool(false,false) -> true

  and(b,true) -> b
  and(b,false) -> false
  # and(true,b) -> b    #---- redundant with previous equations
  # and(false,b) -> false    #---- redundant with previous equations

  eqPos(d1,d1) -> true
  eqPos(d1,cDub(b,p)) -> false
  eqPos(cDub(b,p),d1) -> false
  eqPos(cDub(b,p),cDub(c,q)) -> and(eqBool(b,c), eqPos(p,q))
  # eqPos(cDub(b,p),cDub(b,q)) -> eqPos(p,q)
  # eqPos(cDub(false,p),cDub(true,q)) -> false
  # eqPos(cDub(true,p),cDub(false,q)) -> false
  # eqPos(p,q) -> true if p = q

  lambda0(m) -> eq(eval17(m),evalexp17(m))

  # ifthenelse(true,r,t) -> r
  # ifthenelse(false,r,t) -> t
  # ifthenelse(b,r,t) -> r if r = t    #---- redundant with previous equations

  eq(Z,Z) -> true
  eq(Z,S(r)) -> false
  eq(S(r),Z) -> false
  eq(S(r),S(t)) -> eq(r,t)
  # eq(r,t) -> true if r= t    #---- redundant with previous equations

  # ifthenelseENat(true,m,n) -> m
  # ifthenelseENat(false,m,n) -> n
  # ifthenelseENat(b,m,n) -> m if m = n    #---- redundant with previous equations

  eqENat(Exz,Exz) -> true
  eqENat(Exz,Exs(m)) -> false
  eqENat(Exz,Explus(m,n)) -> false
  eqENat(Exz,Exmult(m,n)) -> false
  eqENat(Exz,Exexp(m,n)) -> false
  eqENat(Exs(m),Exz) -> false
  eqENat(Exs(n),Exs(m)) -> eqENat(n,m)
  eqENat(Exs(m),Explus(n,o)) -> false
  eqENat(Exs(n),Exmult(m,o)) -> false
  eqENat(Exs(m),Exexp(n,o)) -> false
  eqENat(Explus(n,m),Exz) -> false
  eqENat(Explus(m,n),Exs(o)) -> false
  eqENat(Explus(n,m),Explus(o,l)) -> and(eqENat(n,o),eqENat(m,l))
  eqENat(Explus(m,n),Exmult(o,l)) -> false
  eqENat(Explus(n,m),Exexp(o,l)) -> false
  eqENat(Exmult(m,n),Exz) -> false
  eqENat(Exmult(n,m),Exs(o)) -> false
  eqENat(Exmult(m,n),Explus(o,l)) -> false
  eqENat(Exmult(n,m),Exmult(o,l)) -> and(eqENat(n,o),eqENat(m,l))
  eqENat(Exmult(m,n),Exexp(o,l)) -> false
  eqENat(Exexp(n,m),Exz) -> false
  eqENat(Exexp(m,n),Exs(o)) -> false
  eqENat(Exexp(n,m),Explus(o,l)) -> false
  eqENat(Exexp(m,n),Exmult(o,l)) -> false
  eqENat(Exexp(m,n),Exexp(o,l)) -> and(eqENat(m,o),eqENat(n,l))
  # eqENat(n,m) -> true if n = m    #---- redundant with previous equations

  # original rule using lazy evaluation (short-circuits)
  # succ17(r) -> ifthenelse(eq(r,S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z))))))))))))))))),Z,S(r))
  succ17(r) -> Z if eq(r,S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z))))))))))))))))) = true
  succ17(r) -> S(r) if eq(r,S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z))))))))))))))))) = false

  plus17(r,Z) -> r
  plus17(r,S(t)) -> succ17(plus17(r,t))

  mult17(r,Z) -> Z
  mult17(r,S(t)) -> plus17(r,mult17(r,t))

  exp17(r,Z) -> succ17(Z)
  exp17(r,S(t)) -> mult17(r,exp17(r,t))

  eval17(Exz) -> Z
  eval17(Exs(n)) -> succ17(eval17(n))
  eval17(Explus(n,m)) -> plus17(eval17(n),eval17(m))
  eval17(Exmult(n,m)) -> mult17(eval17(n),eval17(m))
  eval17(Exexp(n,m)) -> exp17(eval17(n),eval17(m))

  evalexp17(n) -> eval17(expand(n))

  expand(Exz) -> Exz
  expand(Exs(n)) -> Explus(Exs(Exz),n)
  expand(Explus(n,m)) -> Explus(expand(n),expand(m))
  expand(Exmult(n,Exz)) -> Exz
  expand(Exmult(n,Exs(Exz))) -> expand(n)
  expand(Exmult(n,Explus(m,o))) -> expand(Explus(Exmult(n,m),Exmult(n,o)))
  expand(Exmult(n,Exmult(m,o))) -> expand(Exmult(n,expand(Exmult(m,o))))
  expand(Exmult(n,Exexp(m,o))) -> expand(Exmult(n,expand(Exexp(m,o))))
  expand(Exexp(n,Exz)) -> Exs(Exz)
  # original rule using lazy evaluation (short-circuits)
  # expand(Exexp(n,Exs(m))) -> ifthenelseENat(eqENat(m,Exz),expand(n),expand(Exexp(n,expand(Exs(m)))))
  expand(Exexp(n,Exs(m))) -> expand(n) if eqENat(m,Exz) = true
  expand(Exexp(n,Exs(m))) -> expand(Exexp(n,expand(Exs(m)))) if eqENat(m,Exz) = false
  expand(Exexp(n,Explus(m,o))) -> expand(Exmult(Exexp(n,m),Exexp(n,o)))
  expand(Exexp(n,Exmult(m,o))) -> expand(Exexp(n,expand(Exmult(m,o))))
  expand(Exexp(n,Exexp(m,o))) -> expand(Exexp(n,expand(Exexp(m,o))))

  two -> Exs(Exs(Exz))

  seventeen -> Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exs(Exz)))))))))))))))))))

  f(m) -> lambda0(Exexp(two,m))

EVAL

   f(seventeen)
END-SPEC
