
(datatype Bool)
(datatype Nat)
(datatype NatList)
(datatype ListPair)
(function mytrue () Bool)
(function myfalse () Bool)
(function d0 () Nat)
(function s (Nat) Nat)
(function nil () NatList)
(function cons (Nat NatList) NatList)
(function pair (NatList NatList) ListPair)
(function d10 () Nat)
(function lte (Nat Nat) Bool)
(function plus (Nat Nat) Nat)
(function times (Nat Nat) Nat)
(function rev (Nat) NatList)
(function split (NatList) ListPair)
(function merge (NatList NatList) NatList)
(function mergesORt (NatList) NatList)
(function p1 (ListPair) NatList)
(function p2 (ListPair) NatList)
(rewrite d10 (s (s (s (s (s (s (s (s (s (s d0)))))))))) )
(rewrite (lte d0 (s N)) mytrue )
(rewrite (lte (s N) d0) myfalse )
(rewrite (lte d0 d0) mytrue )
(rewrite (lte (s N) (s M)) (lte N M) )
(rewrite (plus d0 N) N )
(rewrite (plus (s N) M) (s (plus N M)) )
(rewrite (times d0 N) d0 )
(rewrite (times (s N) M) (plus M (times N M)) )
(rewrite (rev (s N)) (cons (s N) (rev N)) )
(rewrite (rev d0) (cons d0 nil) )
(rewrite (merge nil L) L )
(rewrite (merge L nil) L )
(rewrite (merge (cons X L1) (cons Y L2)) (cons X (merge L1 (cons Y L2))) :when ((= (lte X Y) mytrue)))
(rewrite (merge (cons X L1) (cons Y L2)) (cons Y (merge (cons X L1) L2)) :when ((= (lte X Y) myfalse)))
(rewrite (split (cons X (cons Y L))) (pair (cons X (p1 (split L))) (cons Y (p2 (split L)))) )
(rewrite (split nil) (pair nil nil) )
(rewrite (split (cons X nil)) (pair (cons X nil) nil) )
(rewrite (mergesORt nil) nil )
(rewrite (mergesORt (cons X nil)) (cons X nil) )
(rewrite (mergesORt (cons X (cons Y L))) (merge (mergesORt (cons X (p1 (split L)))) (mergesORt (cons Y (p2 (split L))))) )
(rewrite (p1 (pair L1 L2)) L1 )
(rewrite (p2 (pair L1 L2)) L2 )