
(datatype Bool)
(datatype Nat)
(datatype Int)
(function mytrue () Bool)
(function myfalse () Bool)
(function d0 () Nat)
(function s (Nat) Nat)
(function Pos (Nat) Int)
(function Neg (Nat) Int)
(function gte (Nat Nat) Bool)
(function gte_Int (Int Int) Bool)
(function pred (Int) Int)
(function succ (Int) Int)
(function tak (Int Int Int) Int)
(rewrite (gte d0 d0) mytrue )
(rewrite (gte (s X) d0) mytrue )
(rewrite (gte d0 (s X)) myfalse )
(rewrite (gte (s X) (s Y)) (gte X Y) )
(rewrite (gte_Int (Pos X) (Pos Y)) (gte X Y) )
(rewrite (gte_Int (Neg X) (Neg Y)) (gte Y X) )
(rewrite (gte_Int (Pos X) (Neg Y)) mytrue )
(rewrite (gte_Int (Neg X) (Pos Y)) myfalse )
(rewrite (pred (Pos d0)) (Neg d0) )
(rewrite (pred (Pos (s X))) (Pos X) )
(rewrite (pred (Neg X)) (Neg (s X)) )
(rewrite (succ (Neg d0)) (Pos d0) )
(rewrite (succ (Neg (s X))) (Neg X) )
(rewrite (succ (Pos X)) (Pos (s X)) )
(rewrite (tak I J K) K :when ((= (gte_Int J I) mytrue)))
(rewrite (tak I J K) (tak (tak (pred I) J K) (tak (pred J) K I) (tak (pred K) I J)) :when ((= (gte_Int J I) myfalse)))