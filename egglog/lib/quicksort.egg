
(datatype Bool)
(datatype Nat)
(datatype NatList)
(datatype NatListPair)
(function mytrue () Bool)
(function myfalse () Bool)
(function d0 () Nat)
(function s (Nat) Nat)
(function nil () NatList)
(function cons (Nat NatList) NatList)
(function pair (NatList NatList) NatListPair)
(function mynot (Bool) Bool)
(function d10 () Nat)
(function st (Nat Nat) Bool)
(function get (Nat Nat) Bool)
(function plus (Nat Nat) Nat)
(function times (Nat Nat) Nat)
(function rev (Nat) NatList)
(function split (Nat NatList) NatListPair)
(function qsORt (NatList) NatList)
(function append (NatList NatList) NatList)
(function p1 (NatListPair) NatList)
(function p2 (NatListPair) NatList)
(rewrite d10 (s (s (s (s (s (s (s (s (s (s d0)))))))))) )
(rewrite (mynot mytrue) myfalse )
(rewrite (mynot myfalse) mytrue )
(rewrite (st d0 (s N)) mytrue )
(rewrite (st (s N) d0) myfalse )
(rewrite (st d0 d0) myfalse )
(rewrite (st (s N) (s M)) (st N M) )
(rewrite (get N M) (mynot (st N M)) )
(rewrite (plus d0 N) N )
(rewrite (plus (s N) M) (s (plus N M)) )
(rewrite (times d0 N) d0 )
(rewrite (times (s N) M) (plus M (times N M)) )
(rewrite (rev (s N)) (cons (s N) (rev N)) )
(rewrite (rev d0) (cons d0 nil) )
(rewrite (split N (cons M L)) (pair (p1 (split N L)) (cons M (p2 (split N L)))) :when ((= (st N M) mytrue)))
(rewrite (split N (cons M L)) (pair (cons M (p1 (split N L))) (p2 (split N L))) :when ((= (get N M) mytrue)))
(rewrite (split N nil) (pair nil nil) )
(rewrite (append (cons N L) LT) (cons N (append L LT)) )
(rewrite (append nil L) L )
(rewrite (qsORt nil) nil )
(rewrite (qsORt (cons N L)) (append (qsORt (p1 (split N L))) (cons N (qsORt (p2 (split N L))))) )
(rewrite (p1 (pair L1 L2)) L1 )
(rewrite (p2 (pair L1 L2)) L2 )