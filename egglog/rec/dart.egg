
(datatype Nat)
(datatype Set)
(function d0 () Nat)
(function s (Nat) Nat)
(function empty () Set)
(function singleton (Nat) Set)
(function union (Set Set) Set)
(function plus (Nat Nat) Nat)
(function times (Nat Nat) Nat)
(function five () Nat)
(function ten () Nat)
(function fifteen () Nat)
(function twentyfive () Nat)
(function fifty () Nat)
(function u (Set Set) Set)
(function flat (Set Set) Set)
(function add (Set Set) Set)
(function mult (Set Set) Set)
(function singles () Set)
(function doubles () Set)
(function triples () Set)
(function allops () Set)
(function finish () Set)
(rewrite (plus d0 N) N )
(rewrite (plus (s N) M) (s (plus N M)) )
(rewrite (times d0 N) d0 )
(rewrite (times (s N) M) (plus M (times N M)) )
(rewrite (u empty S0) S0 )
(rewrite (u S0 empty) S0 )
(rewrite (u S0 S1) S0 :when ((= S0 S1)))
(rewrite (u S0 S1) (flat S0 (flat S1 empty)) :when ((!= S0 S1)))
(rewrite (flat empty S0) S0 )
(rewrite (flat (singleton I) S0) (union (singleton I) S0) )
(rewrite (flat (union S1 S2) S0) (flat S1 (flat S2 S0)) )
(rewrite (add empty S0) S0 )
(rewrite (add S0 empty) S0 )
(rewrite (add (singleton I) (singleton J)) (singleton (plus I J)) )
(rewrite (add (singleton I) (union (singleton J) S0)) (add (singleton (plus I J)) S0) )
(rewrite (add (union (singleton I) S1) S2) (u (add (singleton I) S2) (add S1 S2)) )
(rewrite (mult empty S0) S0 )
(rewrite (mult S0 empty) S0 )
(rewrite (mult (singleton I) (singleton J)) (singleton (times I J)) )
(rewrite (mult (union (singleton I) S1) S2) (u (mult (singleton I) S2) (mult S1 S2)) )
(rewrite five (s (s (s (s (s d0))))) )
(rewrite ten (s (s (s (s (s five))))) )
(rewrite fifteen (s (s (s (s (s ten))))) )
(rewrite twentyfive (s (s (s (s (s (s (s (s (s (s fifteen)))))))))) )
(rewrite fifty (plus twentyfive twentyfive) )
(rewrite singles (add (singleton (s d0)) (add (singleton (s (s d0))) (add (singleton (s (s (s d0)))) (add (singleton (s (s (s (s d0))))) (add (singleton five) (add (singleton (s five)) (add (singleton (s (s five))) (add (singleton (s (s (s five)))) (add (singleton (s (s (s (s five))))) (add (singleton ten) (add (singleton (s ten)) (add (singleton (s (s ten))) (add (singleton (s (s (s ten)))) (add (singleton (s (s (s (s ten))))) (add (singleton fifteen) (add (singleton (s fifteen)) (add (singleton (s (s fifteen))) (add (singleton (s (s (s fifteen)))) (add (singleton (s (s (s (s fifteen))))) (singleton (plus five fifteen))))))))))))))))))))) )
(rewrite doubles (mult singles (singleton (s (s d0)))) )
(rewrite triples (mult singles (singleton (s (s (s d0))))) )
(rewrite allops (u (u (u (u (u singles doubles) triples) (singleton twentyfive)) (singleton fifty)) (singleton d0)) )
(rewrite finish (add (u doubles (singleton fifty)) (add allops allops)) )
(push)
(define test finish)
(run 10000)
(pop)
