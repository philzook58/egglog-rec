
(datatype Bool)
(datatype Pos)
(datatype Tree)
(datatype SNat)
(function mytrue () Bool)
(function myfalse () Bool)
(function d1 () Pos)
(function cDub (Bool Pos) Pos)
(function leaf (SNat) Tree)
(function node (SNat SNat Tree Tree) Tree)
(function Z () SNat)
(function S (SNat) SNat)
(function eqBool (Bool Bool) Bool)
(function AND (Bool Bool) Bool)
(function eqPos (Pos Pos) Bool)
(function eq (SNat SNat) Bool)
(function f (SNat) Bool)
(function lambda6 (SNat) Bool)
(function lambda5 (SNat Tree) Tree)
(function lambda4 (SNat Tree SNat SNat) Tree)
(function lambda3 (SNat Tree Tree) Tree)
(function lambda2 (SNat Tree Tree SNat SNat) Tree)
(function lambda1 (SNat Tree Tree SNat) Tree)
(function buildtree (SNat SNat) Tree)
(function lambda0 (SNat SNat) SNat)
(function succ17 (SNat) SNat)
(function pred17 (SNat) SNat)
(function plus17 (SNat SNat) SNat)
(function mult17 (SNat SNat) SNat)
(function exp17 (SNat SNat) SNat)
(function evaltree17 (SNat) SNat)
(function getval (Tree) SNat)
(function getmax (Tree) SNat)
(function seventeen () SNat)
(rewrite (eqBool mytrue b) b )
(rewrite (eqBool myfalse mytrue) myfalse )
(rewrite (eqBool myfalse myfalse) mytrue )
(rewrite (AND b mytrue) b )
(rewrite (AND b myfalse) myfalse )
(rewrite (eqPos d1 d1) mytrue )
(rewrite (eqPos d1 (cDub b p)) myfalse )
(rewrite (eqPos (cDub b p) d1) myfalse )
(rewrite (eqPos (cDub b p) (cDub c q)) (AND (eqBool b c) (eqPos p q)) )
(rewrite (lambda6 n) (eq (evaltree17 n) (getval (buildtree n Z))) )
(rewrite (lambda5 n left) (lambda4 n left (getmax left) (getval left)) )
(rewrite (lambda4 n left max o) (lambda3 o left (buildtree n (succ17 max))) )
(rewrite (lambda3 n left right) (lambda2 n left right (getval right) (getmax right)) )
(rewrite (lambda2 n left right o max) (lambda1 max left right (plus17 n o)) )
(rewrite (lambda1 max left right n) (node n max left right) )
(rewrite (lambda0 n o) (mult17 n o) )
(rewrite (eq Z Z) mytrue )
(rewrite (eq Z (S n)) myfalse )
(rewrite (eq (S n) Z) myfalse )
(rewrite (eq (S n) (S o)) (eq n o) )
(rewrite (succ17 n) Z :when ((= (eq n (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) mytrue)))
(rewrite (succ17 n) (S n) :when ((= (eq n (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) myfalse)))
(rewrite (pred17 Z) (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z)))))))))))))))) )
(rewrite (pred17 (S n)) n )
(rewrite (plus17 n Z) n )
(rewrite (plus17 n (S o)) (succ17 (plus17 n o)) )
(rewrite (mult17 n Z) Z )
(rewrite (mult17 n (S o)) (plus17 n (mult17 n o)) )
(rewrite (exp17 n Z) (succ17 Z) )
(rewrite (exp17 n (S o)) (mult17 n (exp17 n o)) )
(rewrite (evaltree17 n) (lambda0 (exp17 (S (S Z)) (pred17 n)) (pred17 (exp17 (S (S Z)) n))) )
(rewrite (getval (leaf n)) n )
(rewrite (getval (node n max left right)) n )
(rewrite (getmax (leaf n)) n )
(rewrite (getmax (node n max left right)) max )
(rewrite (buildtree Z n) (leaf n) )
(rewrite (buildtree (S n) o) (lambda5 n (buildtree n o)) )
(rewrite seventeen (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))) )
(rewrite (f n) (lambda6 seventeen) )
(push)
(define test (f seventeen))
(run 10000)
(pop)
