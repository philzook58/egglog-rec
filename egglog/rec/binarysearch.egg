
(datatype Bool)
(datatype Pos)
(datatype Int)
(datatype Nat)
(function T () Bool)
(function F () Bool)
(function One () Pos)
(function cDub (Bool Pos) Pos)
(function cInt (Nat) Int)
(function cNeg (Pos) Int)
(function Zero () Nat)
(function cNat (Pos) Nat)
(function eqBool (Bool Bool) Bool)
(function mynot (Bool) Bool)
(function AND (Bool Bool) Bool)
(function eqPos (Pos Pos) Bool)
(function lePos (Pos Pos) Bool)
(function ltPos (Pos Pos) Bool)
(function gePos (Pos Pos) Bool)
(function succ2Pos (Pos) Pos)
(function plusPos (Pos Pos) Pos)
(function addc (Bool Pos Pos) Pos)
(function lambda0 (Nat Nat Nat Nat) Nat)
(function max2Int (Int Nat) Nat)
(function min2 (Nat) Int)
(function minus (Nat Nat) Int)
(function eq (Nat Nat) Bool)
(function ite (Bool Nat Nat) Nat)
(function Pos2Nat (Pos) Nat)
(function Nat2Pos (Nat) Pos)
(function le (Nat Nat) Bool)
(function lt (Nat Nat) Bool)
(function ge (Nat Nat) Bool)
(function max2 (Nat Nat) Nat)
(function succ2 (Nat) Pos)
(function pred2 (Pos) Nat)
(function dub (Bool Nat) Nat)
(function plusNatPos (Nat Pos) Pos)
(function plus (Nat Nat) Nat)
(function gtesubtp (Pos Pos) Nat)
(function gtesubtn (Nat Nat) Nat)
(function gtesubtb (Bool Pos Pos) Nat)
(function dividePos (Pos Pos) Nat)
(function divide (Nat Pos) Nat)
(function f (Nat) Nat)
(function bs (Nat Nat) Nat)
(function bs2 (Nat Nat Nat) Nat)
(rewrite (eqBool T b) b )
(rewrite (eqBool F T) F )
(rewrite (eqBool F F) T )
(rewrite (AND T b) b )
(rewrite (AND F b) F )
(rewrite (mynot T) F )
(rewrite (mynot F) T )
(rewrite (eqPos One One) T )
(rewrite (eqPos One (cDub b p)) F )
(rewrite (eqPos (cDub b p) One) F )
(rewrite (eqPos (cDub b p) (cDub c q)) (AND (eqBool b c) (eqPos p q)) )
(rewrite (lePos One p) T )
(rewrite (lePos (cDub b p) One) F )
(rewrite (lePos (cDub b p) (cDub c q)) (lePos p q) :when ((= b c)))
(rewrite (lePos (cDub b p) (cDub c q)) (lePos p q) :when ((!= b c) (= b F)))
(rewrite (lePos (cDub b p) (cDub c q)) (ltPos p q) :when ((!= b c) (= b T)))
(rewrite (ltPos p One) F )
(rewrite (ltPos One (cDub b p)) T )
(rewrite (ltPos (cDub b p) (cDub c q)) (ltPos p q) :when ((= b c)))
(rewrite (ltPos (cDub b p) (cDub c q)) (lePos p q) :when ((!= b c) (= b F)))
(rewrite (ltPos (cDub b p) (cDub c q)) (ltPos p q) :when ((!= b c) (= b T)))
(rewrite (gePos p q) (lePos q p) )
(rewrite (succ2Pos One) (cDub F One) )
(rewrite (succ2Pos (cDub F p)) (cDub T p) )
(rewrite (succ2Pos (cDub T p)) (cDub F (succ2Pos p)) )
(rewrite (plusPos p q) (addc F p q) )
(rewrite (addc F One p) (succ2Pos p) )
(rewrite (addc T One p) (succ2Pos (succ2Pos p)) )
(rewrite (addc F p One) (succ2Pos p) )
(rewrite (addc T p One) (succ2Pos (succ2Pos p)) )
(rewrite (addc b (cDub c p) (cDub d q)) (cDub b (addc c p q)) :when ((= c d)))
(rewrite (addc b (cDub c p) (cDub d q)) (cDub (mynot b) (addc b p q)) :when ((!= c d)))
(rewrite (lambda0 n y x h) (bs2 n h y) :when ((= (lt (f h) n) T)))
(rewrite (lambda0 n y x h) (bs2 n x h) :when ((= (lt (f h) n) F)))
(rewrite (max2Int (cInt m) n) (max2 m n) )
(rewrite (max2Int (cNeg p) n) n )
(rewrite (min2 Zero) (cInt Zero) )
(rewrite (min2 (cNat p)) (cNeg p) )
(rewrite (minus m n) (cInt (gtesubtn m n)) :when ((= (ge m n) T)))
(rewrite (minus m n) (min2 (gtesubtn n m)) :when ((= (lt m n) T)))
(rewrite (eq Zero Zero) T )
(rewrite (eq Zero (cNat p)) F )
(rewrite (eq (cNat p) Zero) F )
(rewrite (eq (cNat p) (cNat q)) (eqPos p q) )
(rewrite (ite T m n) m )
(rewrite (ite F m n) n )
(rewrite (Pos2Nat p) (cNat p) )
(rewrite (Nat2Pos (cNat p)) p )
(rewrite (le Zero n) T )
(rewrite (le (cNat p) Zero) F )
(rewrite (le (cNat p) (cNat q)) (lePos p q) )
(rewrite (lt n Zero) F )
(rewrite (lt Zero (cNat p)) T )
(rewrite (lt (cNat p) (cNat q)) (ltPos p q) )
(rewrite (ge m n) (le n m) )
(rewrite (max2 m n) (ite (le m n) n m) )
(rewrite (succ2 Zero) One )
(rewrite (succ2 (cNat p)) (succ2Pos p) )
(rewrite (pred2 One) Zero )
(rewrite (pred2 (cDub T p)) (cNat (cDub F p)) )
(rewrite (pred2 (cDub F p)) (dub T (pred2 p)) )
(rewrite (dub F Zero) Zero )
(rewrite (dub T Zero) (cNat One) )
(rewrite (dub b (cNat p)) (cNat (cDub b p)) )
(rewrite (plusNatPos Zero p) p )
(rewrite (plusNatPos (cNat p) q) (plusPos p q) )
(rewrite (plus Zero n) n )
(rewrite (plus n Zero) n )
(rewrite (plus (cNat p) (cNat q)) (cNat (addc F p q)) )
(rewrite (gtesubtp p q) (gtesubtb F p q) )
(rewrite (gtesubtn n Zero) n )
(rewrite (gtesubtn (cNat p) (cNat q)) (gtesubtp p q) )
(rewrite (gtesubtb F p One) (pred2 p) )
(rewrite (gtesubtb T p One) (pred2 (Nat2Pos (pred2 p))) )
(rewrite (gtesubtb b (cDub c p) (cDub d q)) (dub b (gtesubtb b p q)) :when ((= c d)))
(rewrite (gtesubtb b (cDub c p) (cDub d q)) (dub (mynot b) (gtesubtb d p q)) :when ((!= c d)))
(rewrite (dividePos p q) (cNat (succ2 (divide (gtesubtp p q) q))) :when ((= (gePos p q) T)))
(rewrite (dividePos p q) Zero :when ((= (ltPos p q) T)))
(rewrite (divide Zero p) Zero )
(rewrite (divide (cNat p) q) (dividePos p q) )
(rewrite (f Zero) Zero )
(rewrite (f (cNat One)) (cNat One) )
(rewrite (f (cNat (cDub b p))) (plus (f (max2Int (minus (cNat (cDub b p)) (Pos2Nat One)) Zero)) (f (max2Int (minus (cNat (cDub b p)) (Pos2Nat (cDub F One))) Zero))) )
(rewrite (bs n m) (bs2 n Zero m) )
(rewrite (bs2 n x y) x :when ((= (eq (Pos2Nat (plusNatPos x One)) y) T)))
(rewrite (bs2 n x y) (lambda0 n y x (divide (plus x y) (cDub F One))) :when ((= (eq (Pos2Nat (plusNatPos x One)) y) F)))
(push)
(define test (bs (Pos2Nat (cDub T (cDub T (cDub F (cDub T (cDub F (cDub T (cDub T (cDub F (cDub T (cDub F (cDub T One)))))))))))) (Pos2Nat (cDub F (cDub F (cDub F (cDub F (cDub F (cDub F One)))))))))
(run 10000)
(pop)
