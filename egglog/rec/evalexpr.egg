
(datatype Bool)
(datatype Pos)
(datatype ENat)
(datatype SNat)
(function mytrue () Bool)
(function myfalse () Bool)
(function d1 () Pos)
(function cDub (Bool Pos) Pos)
(function Exz () ENat)
(function Exs (ENat) ENat)
(function Explus (ENat ENat) ENat)
(function Exmult (ENat ENat) ENat)
(function Exexp (ENat ENat) ENat)
(function Z () SNat)
(function S (SNat) SNat)
(function eqBool (Bool Bool) Bool)
(function AND (Bool Bool) Bool)
(function eqPos (Pos Pos) Bool)
(function lambda0 (ENat) Bool)
(function eqENat (ENat ENat) Bool)
(function eq (SNat SNat) Bool)
(function succ17 (SNat) SNat)
(function plus17 (SNat SNat) SNat)
(function mult17 (SNat SNat) SNat)
(function exp17 (SNat SNat) SNat)
(function eval17 (ENat) SNat)
(function evalexp17 (ENat) SNat)
(function expAND (ENat) ENat)
(function two () ENat)
(function seventeen () ENat)
(function f (ENat) Bool)
(rewrite (eqBool mytrue b) b )
(rewrite (eqBool myfalse mytrue) myfalse )
(rewrite (eqBool myfalse myfalse) mytrue )
(rewrite (AND b mytrue) b )
(rewrite (AND b myfalse) myfalse )
(rewrite (eqPos d1 d1) mytrue )
(rewrite (eqPos d1 (cDub b p)) myfalse )
(rewrite (eqPos (cDub b p) d1) myfalse )
(rewrite (eqPos (cDub b p) (cDub c q)) (AND (eqBool b c) (eqPos p q)) )
(rewrite (lambda0 m) (eq (eval17 m) (evalexp17 m)) )
(rewrite (eq Z Z) mytrue )
(rewrite (eq Z (S r)) myfalse )
(rewrite (eq (S r) Z) myfalse )
(rewrite (eq (S r) (S t)) (eq r t) )
(rewrite (eqENat Exz Exz) mytrue )
(rewrite (eqENat Exz (Exs m)) myfalse )
(rewrite (eqENat Exz (Explus m n)) myfalse )
(rewrite (eqENat Exz (Exmult m n)) myfalse )
(rewrite (eqENat Exz (Exexp m n)) myfalse )
(rewrite (eqENat (Exs m) Exz) myfalse )
(rewrite (eqENat (Exs n) (Exs m)) (eqENat n m) )
(rewrite (eqENat (Exs m) (Explus n o)) myfalse )
(rewrite (eqENat (Exs n) (Exmult m o)) myfalse )
(rewrite (eqENat (Exs m) (Exexp n o)) myfalse )
(rewrite (eqENat (Explus n m) Exz) myfalse )
(rewrite (eqENat (Explus m n) (Exs o)) myfalse )
(rewrite (eqENat (Explus n m) (Explus o l)) (AND (eqENat n o) (eqENat m l)) )
(rewrite (eqENat (Explus m n) (Exmult o l)) myfalse )
(rewrite (eqENat (Explus n m) (Exexp o l)) myfalse )
(rewrite (eqENat (Exmult m n) Exz) myfalse )
(rewrite (eqENat (Exmult n m) (Exs o)) myfalse )
(rewrite (eqENat (Exmult m n) (Explus o l)) myfalse )
(rewrite (eqENat (Exmult n m) (Exmult o l)) (AND (eqENat n o) (eqENat m l)) )
(rewrite (eqENat (Exmult m n) (Exexp o l)) myfalse )
(rewrite (eqENat (Exexp n m) Exz) myfalse )
(rewrite (eqENat (Exexp m n) (Exs o)) myfalse )
(rewrite (eqENat (Exexp n m) (Explus o l)) myfalse )
(rewrite (eqENat (Exexp m n) (Exmult o l)) myfalse )
(rewrite (eqENat (Exexp m n) (Exexp o l)) (AND (eqENat m o) (eqENat n l)) )
(rewrite (succ17 r) Z :when ((= (eq r (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) mytrue)))
(rewrite (succ17 r) (S r) :when ((= (eq r (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))) myfalse)))
(rewrite (plus17 r Z) r )
(rewrite (plus17 r (S t)) (succ17 (plus17 r t)) )
(rewrite (mult17 r Z) Z )
(rewrite (mult17 r (S t)) (plus17 r (mult17 r t)) )
(rewrite (exp17 r Z) (succ17 Z) )
(rewrite (exp17 r (S t)) (mult17 r (exp17 r t)) )
(rewrite (eval17 Exz) Z )
(rewrite (eval17 (Exs n)) (succ17 (eval17 n)) )
(rewrite (eval17 (Explus n m)) (plus17 (eval17 n) (eval17 m)) )
(rewrite (eval17 (Exmult n m)) (mult17 (eval17 n) (eval17 m)) )
(rewrite (eval17 (Exexp n m)) (exp17 (eval17 n) (eval17 m)) )
(rewrite (evalexp17 n) (eval17 (expAND n)) )
(rewrite (expAND Exz) Exz )
(rewrite (expAND (Exs n)) (Explus (Exs Exz) n) )
(rewrite (expAND (Explus n m)) (Explus (expAND n) (expAND m)) )
(rewrite (expAND (Exmult n Exz)) Exz )
(rewrite (expAND (Exmult n (Exs Exz))) (expAND n) )
(rewrite (expAND (Exmult n (Explus m o))) (expAND (Explus (Exmult n m) (Exmult n o))) )
(rewrite (expAND (Exmult n (Exmult m o))) (expAND (Exmult n (expAND (Exmult m o)))) )
(rewrite (expAND (Exmult n (Exexp m o))) (expAND (Exmult n (expAND (Exexp m o)))) )
(rewrite (expAND (Exexp n Exz)) (Exs Exz) )
(rewrite (expAND (Exexp n (Exs m))) (expAND n) :when ((= (eqENat m Exz) mytrue)))
(rewrite (expAND (Exexp n (Exs m))) (expAND (Exexp n (expAND (Exs m)))) :when ((= (eqENat m Exz) myfalse)))
(rewrite (expAND (Exexp n (Explus m o))) (expAND (Exmult (Exexp n m) (Exexp n o))) )
(rewrite (expAND (Exexp n (Exmult m o))) (expAND (Exexp n (expAND (Exmult m o)))) )
(rewrite (expAND (Exexp n (Exexp m o))) (expAND (Exexp n (expAND (Exexp m o)))) )
(rewrite two (Exs (Exs Exz)) )
(rewrite seventeen (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs Exz))))))))))))))))))) )
(rewrite (f m) (lambda0 (Exexp two m)) )
(push)
(define test (f seventeen))
(run 10000)
(pop)
