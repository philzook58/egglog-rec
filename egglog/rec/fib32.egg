
(datatype Bool)
(datatype Pos)
(datatype Int)
(datatype Nat)
(function T () Bool)
(function F () Bool)
(function d1 () Pos)
(function cDub (Bool Pos) Pos)
(function cInt (Nat) Int)
(function cNeg (Pos) Int)
(function d0 () Nat)
(function cNat (Pos) Nat)
(function mynot (Bool) Bool)
(function eqPos (Pos Pos) Bool)
(function lePos (Pos Pos) Bool)
(function ltPos (Pos Pos) Bool)
(function s (Pos) Pos)
(function addc (Bool Pos Pos) Pos)
(function Int2Nat (Int) Nat)
(function minus (Nat) Int)
(function minus2 (Nat Nat) Int)
(function eq (Nat Nat) Bool)
(function Pos2Nat (Pos) Nat)
(function Nat2Pos (Nat) Pos)
(function le (Nat Nat) Bool)
(function lt (Nat Nat) Bool)
(function ge (Nat Nat) Bool)
(function gt (Nat Nat) Bool)
(function pre (Pos) Nat)
(function dub (Bool Nat) Nat)
(function plus (Nat Nat) Nat)
(function gtesubtPos (Pos Pos) Nat)
(function gtesubt (Nat Nat) Nat)
(function gtesubtb (Bool Pos Pos) Nat)
(function fib (Nat) Nat)
(function eqBool (Bool Bool) Bool)
(function AND (Bool Bool) Bool)
(rewrite (eqBool T b) b )
(rewrite (eqBool F T) F )
(rewrite (eqBool F F) T )
(rewrite (AND T b) b )
(rewrite (AND F b) F )
(rewrite (mynot T) F )
(rewrite (mynot F) T )
(rewrite (eqPos d1 d1) T )
(rewrite (eqPos d1 (cDub b p)) F )
(rewrite (eqPos (cDub b p) d1) F )
(rewrite (eqPos (cDub b p) (cDub c q)) (AND (eqBool b c) (eqPos p q)) )
(rewrite (lePos d1 p) T )
(rewrite (lePos (cDub b p) d1) F )
(rewrite (lePos (cDub b p) (cDub c q)) (lePos p q) :when ((= b c)))
(rewrite (lePos (cDub b p) (cDub c q)) (lePos p q) :when ((!= b c) (= b F)))
(rewrite (lePos (cDub b p) (cDub c q)) (ltPos p q) :when ((!= b c) (= b T)))
(rewrite (ltPos p d1) F )
(rewrite (ltPos d1 (cDub b p)) T )
(rewrite (ltPos (cDub b p) (cDub c q)) (ltPos p q) :when ((= b c)))
(rewrite (ltPos (cDub b p) (cDub c q)) (lePos p q) :when ((!= b c) (= b F)))
(rewrite (ltPos (cDub b p) (cDub c q)) (ltPos p q) :when ((!= b c) (= b T)))
(rewrite (s d1) (cDub F d1) )
(rewrite (s (cDub F p)) (cDub T p) )
(rewrite (s (cDub T p)) (cDub F (s p)) )
(rewrite (addc F d1 p) (s p) )
(rewrite (addc T d1 p) (s (s p)) )
(rewrite (addc F p d1) (s p) )
(rewrite (addc T p d1) (s (s p)) )
(rewrite (addc b (cDub c p) (cDub d q)) (cDub b (addc c p q)) :when ((= c d)))
(rewrite (addc b (cDub c p) (cDub d q)) (cDub (mynot b) (addc c p q)) :when ((!= c d)))
(rewrite (Int2Nat (cInt n)) n )
(rewrite (minus d0) (cInt d0) )
(rewrite (minus (cNat p)) (cNeg p) )
(rewrite (minus2 m n) (cInt (gtesubt m n)) :when ((= (ge m n) T)))
(rewrite (minus2 m n) (minus (gtesubt n m)) :when ((= (ge m n) F)))
(rewrite (Pos2Nat p) (cNat p) )
(rewrite (Nat2Pos (cNat p)) p )
(rewrite (eq d0 d0) T )
(rewrite (eq d0 (cNat p)) F )
(rewrite (eq (cNat p) d0) F )
(rewrite (eq (cNat p) (cNat q)) (eqPos p q) )
(rewrite (le d0 n) T )
(rewrite (le (cNat p) d0) F )
(rewrite (le (cNat p) (cNat q)) (lePos p q) )
(rewrite (lt n d0) F )
(rewrite (lt d0 (cNat p)) T )
(rewrite (lt (cNat p) (cNat q)) (ltPos p q) )
(rewrite (ge m n) (le n m) )
(rewrite (gt m n) (lt n m) )
(rewrite (pre d1) d0 )
(rewrite (pre (cDub T p)) (cNat (cDub F p)) )
(rewrite (pre (cDub F p)) (dub T (pre p)) )
(rewrite (dub F d0) d0 )
(rewrite (dub T d0) (cNat d1) )
(rewrite (dub b (cNat p)) (cNat (cDub b p)) )
(rewrite (plus d0 n) n )
(rewrite (plus n d0) n )
(rewrite (plus (cNat p) (cNat q)) (cNat (addc F p q)) )
(rewrite (gtesubtPos p q) (gtesubtb F p q) )
(rewrite (gtesubt n d0) n )
(rewrite (gtesubt (cNat p) (cNat q)) (gtesubtPos p q) )
(rewrite (gtesubtb F p d1) (pre p) )
(rewrite (gtesubtb T p d1) (pre (Nat2Pos (pre p))) )
(rewrite (gtesubtb b (cDub c p) (cDub d q)) (dub b (gtesubtb b p q)) :when ((= c d)))
(rewrite (gtesubtb b (cDub c p) (cDub d q)) (dub (mynot b) (gtesubtb T p q)) :when ((!= c d) (= c F)))
(rewrite (gtesubtb b (cDub c p) (cDub d q)) (dub (mynot b) (gtesubtb d p q)) :when ((!= c d) (= c T)))
(rewrite (fib d0) d0 )
(rewrite (fib (cNat d1)) (cNat d1) )
(rewrite (fib (cNat (cDub b p))) (plus (fib (Int2Nat (minus2 (cNat (cDub b p)) (Pos2Nat d1)))) (fib (Int2Nat (minus2 (cNat (cDub b p)) (Pos2Nat (cDub F d1)))))) )
(push)
(define test (fib (Pos2Nat (cDub F (cDub F (cDub F (cDub F (cDub F d1))))))))
(run 10000)
(pop)
