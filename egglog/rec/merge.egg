
(datatype Bool)
(datatype Strg)
(datatype List)
(function mytrue () Bool)
(function myfalse () Bool)
(function a () Strg)
(function b () Strg)
(function c (Strg Strg) Strg)
(function nil () List)
(function l (Strg List) List)
(function gte (Strg Strg) Bool)
(function merge (List List) List)
(function sORt (List) List)
(function odd (List) List)
(function even (List) List)
(rewrite (gte b a) mytrue )
(rewrite (gte a b) myfalse )
(rewrite (gte a a) mytrue )
(rewrite (gte b b) mytrue )
(rewrite (gte (c E S) E2) (gte E E2) )
(rewrite (gte E (c E2 S2)) myfalse :when ((= E E2)))
(rewrite (gte E (c E2 S2)) (gte E E2) :when ((!= E E2)))
(rewrite (merge nil L1) L1 )
(rewrite (merge L1 nil) L1 )
(rewrite (merge (l S L1) (l S2 L2)) (l S2 (merge (l S L1) L2)) :when ((= (gte S S2) mytrue)))
(rewrite (merge (l S L1) (l S2 L2)) (l S (merge L1 (l S2 L2))) :when ((= (gte S S2) myfalse)))
(rewrite (odd nil) nil )
(rewrite (odd (l S nil)) (l S nil) )
(rewrite (odd (l S (l S2 L1))) (l S (odd L1)) )
(rewrite (even nil) nil )
(rewrite (even (l S nil)) nil )
(rewrite (even (l S (l S2 L1))) (l S2 (even L1)) )
(rewrite (sORt nil) nil )
(rewrite (sORt (l S nil)) (l S nil) )
(rewrite (sORt (l S (l S2 L1))) (merge (sORt (odd (l S (l S2 L1)))) (sORt (even (l S (l S2 L1))))) )
(push)
(define test (sORt (l (c a (c b (c a b))) (l (c b (c a (c b b))) (l (c a (c b (c a a))) (l (c b (c b (c b b))) (l (c b (c b (c b a))) (l (c a (c a (c a b))) (l (c b (c b (c a a))) (l (c a (c a (c a a))) (l (c a (c a (c b b))) (l (c b (c a (c b a))) (l (c a (c b (c a b))) (l (c b (c a (c b b))) (l (c a (c b (c a a))) (l (c b (c b (c b b))) (l (c b (c b (c b a))) (l (c a (c a (c a b))) (l (c b (c b (c a a))) (l (c a (c a (c a a))) (l (c a (c a (c b b))) (l (c b (c a (c b a))) (l (c a (c b (c a b))) (l (c b (c a (c b b))) (l (c a (c b (c a a))) (l (c b (c b (c b b))) (l (c b (c b (c b a))) (l (c a (c a (c a b))) (l (c b (c b (c a a))) (l (c a (c a (c a a))) (l (c a (c a (c b b))) (l (c b (c a (c b a))) (l (c a (c b (c a b))) (l (c b (c a (c b b))) (l (c a (c b (c a a))) (l (c b (c b (c b b))) (l (c b (c b (c b a))) (l (c a (c a (c a b))) (l (c b (c b (c a a))) (l (c a (c a (c a a))) (l (c a (c a (c b b))) (l (c b (c a (c b a))) (l (c a (c b (c a b))) (l (c b (c a (c b b))) (l (c a (c b (c a a))) (l (c b (c b (c b b))) (l (c b (c b (c b a))) (l (c a (c a (c a b))) (l (c b (c b (c a a))) (l (c a (c a (c a a))) (l (c a (c a (c b b))) (l (c b (c a (c b a))) nil))))))))))))))))))))))))))))))))))))))))))))))))))))
(run 10000)
(pop)
