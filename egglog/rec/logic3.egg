
(datatype Bool3)
(function d0 () Bool3)
(function d1 () Bool3)
(function d2 () Bool3)
(function a () Bool3)
(function b () Bool3)
(function c () Bool3)
(function d () Bool3)
(function e () Bool3)
(function f () Bool3)
(function g () Bool3)
(function h () Bool3)
(function plus (Bool3 Bool3) Bool3)
(function times (Bool3 Bool3) Bool3)
(function AND (Bool3 Bool3) Bool3)
(function OR (Bool3 Bool3) Bool3)
(function mynot (Bool3) Bool3)
(function succ (Bool3) Bool3)
(function eq (Bool3 Bool3) Bool3)
(rewrite a d0 )
(rewrite b d1 )
(rewrite c d2 )
(rewrite d d0 )
(rewrite e d1 )
(rewrite f d2 )
(rewrite g d0 )
(rewrite h d1 )
(rewrite (succ d0) d1 )
(rewrite (succ d1) d2 )
(rewrite (succ d2) d0 )
(rewrite (plus d0 X) X )
(rewrite (plus d1 X) (succ X) )
(rewrite (plus d2 X) (succ (succ X)) )
(rewrite (times d0 X) d0 )
(rewrite (times d1 X) X )
(rewrite (times d2 d0) d0 )
(rewrite (times d2 d1) d2 )
(rewrite (times d2 d2) d1 )
(rewrite (AND X Y) (plus (times (times X X) (times Y Y)) (plus (times d2 (times (times X X) Y)) (plus (times d2 (times (times Y Y) X)) (times d2 (times X Y))))) )
(rewrite (OR X Y) (plus (times d2 (times (times X X) (times Y Y))) (plus (times (times X X) Y) (plus (times (times Y Y) X) (plus (times X Y) (plus X Y))))) )
(rewrite (mynot X) (plus (times d2 X) d1) )
(rewrite (eq X Y) d1 :when ((= X Y)))
(rewrite (eq X Y) d0 :when ((!= X Y)))
(push)
(define test (eq (AND (AND (AND a b) (AND c d)) (AND (AND e f) (AND g h))) (mynot (OR (OR (OR (mynot a) (mynot b)) (OR (mynot c) (mynot d))) (OR (OR (mynot e) (mynot f)) (OR (mynot g) (mynot h)))))))
(run 10000)
(pop)
